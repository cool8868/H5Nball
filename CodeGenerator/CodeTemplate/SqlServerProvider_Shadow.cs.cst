<%@ CodeTemplate Language="C#"  TargetLanguage="C#" Inherits="MyCodeTemplate.BaseTemplate.BaseCSharpTableTemplate" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database table schema." ResponseEncoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="MyCodeTemplate" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="MyCodeTempate.Common" %>
<% string []SingleRowReaderCommands=SingleRowReaderCommandNames.Split(',');
    string []MultiRowReaderCommands=MultiRowReaderCommandNames.Split(',');
    string []ScalarCommands=ScalarCommandNames.Split(',');
    string []NoQueryCommands=NoQueryCommandNames.Split(',');
 %>


	/// <summary>
    /// 带事务Insert
    /// </summary>
    /// <param name="entity"></param>
    /// <param name="trans">The trans.</param>
    /// <returns></returns>
    /// <remarks><%= DateTime.Now %></remarks>
    public bool Save<%=GetClassName(SourceTable.Name)%>(Shadow<%=GetClassName(SourceTable.Name)%>Entity entity,DbTransaction trans=null)
    {
        var database = new SqlDatabase(this.ConnectionString);
        DbCommand commandWrapper = database.GetStoredProcCommand("dbo.P_<%=GetClassName(SourceTable.Name,"2")%>_Insert");
                    
        <%{%>
        <%CommandSchema cmdTemp = SourceTable.Database.Commands[string.Format("P_{0}_Insert",GetClassName(SourceTable.Name,"2"))];%>
        <%=DalCodeGen.GetCallProcMakeEntityParamStr(cmdTemp)%>
        <%}%>
        int results = 0;

        if(trans!=null)
        {
            results = database.ExecuteNonQuery(commandWrapper,trans);
        }
        else
        {
            results = database.ExecuteNonQuery(commandWrapper);
        }
        
        <%{%>
        <%CommandSchema cmdTemp = SourceTable.Database.Commands[string.Format("P_{0}_Insert",GetClassName(SourceTable.Name,"2"))];%>
        <% foreach (ParameterSchema parameter in cmdTemp.AllOutputParameters) {%>
        entity.<%=parameter.Name.TrimStart('@')%>=(<%=parameter.SystemType%>)database.GetParameterValue(commandWrapper, "<%=parameter.Name%>");
        <%}}%>
        
        return Convert.ToBoolean(results);		
    }
	
        
<script runat="template">

</script>
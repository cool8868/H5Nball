//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.19408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.19408 版自动生成。
// 
#pragma warning disable 1591

namespace Games.NBall.WebServerFacade.NwWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NwWebServiceSoap", Namespace="http://nball.com/")]
    public partial class NwWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetStartGameEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStartgameEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCoinOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCoin2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargeOperationCompleted;
        
        private System.Threading.SendOrPostCallback BuyPointShipmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegistOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegistByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsRegistByNameListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManagerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback AttachmentReceiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback TxBuyItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback TxTaskStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback KickSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockUserUnexpectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback CrowdStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback PeakStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback CrowdSendPrizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddManagerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnlineCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSessionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckLockStateNDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback BreakLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendItemByShareOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NwWebService() {
            this.Url = global::Games.NBall.WebServerFacade.Properties.Settings.Default.Games_NBall_WebServerFacade_NwWebService_NwWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetStartGameEntityCompletedEventHandler SetStartGameEntityCompleted;
        
        /// <remarks/>
        public event GetStartgameEntityCompletedEventHandler GetStartgameEntityCompleted;
        
        /// <remarks/>
        public event AddCoinCompletedEventHandler AddCoinCompleted;
        
        /// <remarks/>
        public event AddCoin2CompletedEventHandler AddCoin2Completed;
        
        /// <remarks/>
        public event ChargeCompletedEventHandler ChargeCompleted;
        
        /// <remarks/>
        public event BuyPointShipmentsCompletedEventHandler BuyPointShipmentsCompleted;
        
        /// <remarks/>
        public event IsRegistCompletedEventHandler IsRegistCompleted;
        
        /// <remarks/>
        public event IsRegistByNameCompletedEventHandler IsRegistByNameCompleted;
        
        /// <remarks/>
        public event IsRegistByNameListCompletedEventHandler IsRegistByNameListCompleted;
        
        /// <remarks/>
        public event GetManagerListCompletedEventHandler GetManagerListCompleted;
        
        /// <remarks/>
        public event CheckActiveCompletedEventHandler CheckActiveCompleted;
        
        /// <remarks/>
        public event AttachmentReceiveCompletedEventHandler AttachmentReceiveCompleted;
        
        /// <remarks/>
        public event TxBuyItemCompletedEventHandler TxBuyItemCompleted;
        
        /// <remarks/>
        public event TxTaskStepCompletedEventHandler TxTaskStepCompleted;
        
        /// <remarks/>
        public event KickSessionCompletedEventHandler KickSessionCompleted;
        
        /// <remarks/>
        public event LockUserUnexpectCompletedEventHandler LockUserUnexpectCompleted;
        
        /// <remarks/>
        public event ResetCacheCompletedEventHandler ResetCacheCompleted;
        
        /// <remarks/>
        public event CrowdStartCompletedEventHandler CrowdStartCompleted;
        
        /// <remarks/>
        public event PeakStartCompletedEventHandler PeakStartCompleted;
        
        /// <remarks/>
        public event CrowdSendPrizeCompletedEventHandler CrowdSendPrizeCompleted;
        
        /// <remarks/>
        public event AddManagerDataCompletedEventHandler AddManagerDataCompleted;
        
        /// <remarks/>
        public event GetOnlineCountCompletedEventHandler GetOnlineCountCompleted;
        
        /// <remarks/>
        public event SetSessionIdCompletedEventHandler SetSessionIdCompleted;
        
        /// <remarks/>
        public event GetSessionIdCompletedEventHandler GetSessionIdCompleted;
        
        /// <remarks/>
        public event CheckLockStateNDateCompletedEventHandler CheckLockStateNDateCompleted;
        
        /// <remarks/>
        public event BreakLockCompletedEventHandler BreakLockCompleted;
        
        /// <remarks/>
        public event SendItemByShareCompletedEventHandler SendItemByShareCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/SetStartGameEntity", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetStartGameEntity(string openId, string state, string serverId, string pf, string sessionId, string jsNeed, string nickName, string common) {
            object[] results = this.Invoke("SetStartGameEntity", new object[] {
                        openId,
                        state,
                        serverId,
                        pf,
                        sessionId,
                        jsNeed,
                        nickName,
                        common});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetStartGameEntityAsync(string openId, string state, string serverId, string pf, string sessionId, string jsNeed, string nickName, string common) {
            this.SetStartGameEntityAsync(openId, state, serverId, pf, sessionId, jsNeed, nickName, common, null);
        }
        
        /// <remarks/>
        public void SetStartGameEntityAsync(string openId, string state, string serverId, string pf, string sessionId, string jsNeed, string nickName, string common, object userState) {
            if ((this.SetStartGameEntityOperationCompleted == null)) {
                this.SetStartGameEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetStartGameEntityOperationCompleted);
            }
            this.InvokeAsync("SetStartGameEntity", new object[] {
                        openId,
                        state,
                        serverId,
                        pf,
                        sessionId,
                        jsNeed,
                        nickName,
                        common}, this.SetStartGameEntityOperationCompleted, userState);
        }
        
        private void OnSetStartGameEntityOperationCompleted(object arg) {
            if ((this.SetStartGameEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetStartGameEntityCompleted(this, new SetStartGameEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/GetStartgameEntity", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public A8csdkStartgameEntity GetStartgameEntity(string openId) {
            object[] results = this.Invoke("GetStartgameEntity", new object[] {
                        openId});
            return ((A8csdkStartgameEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetStartgameEntityAsync(string openId) {
            this.GetStartgameEntityAsync(openId, null);
        }
        
        /// <remarks/>
        public void GetStartgameEntityAsync(string openId, object userState) {
            if ((this.GetStartgameEntityOperationCompleted == null)) {
                this.GetStartgameEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStartgameEntityOperationCompleted);
            }
            this.InvokeAsync("GetStartgameEntity", new object[] {
                        openId}, this.GetStartgameEntityOperationCompleted, userState);
        }
        
        private void OnGetStartgameEntityOperationCompleted(object arg) {
            if ((this.GetStartgameEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStartgameEntityCompleted(this, new GetStartgameEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/AddCoin", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCoin(System.Guid managerId, int coin) {
            object[] results = this.Invoke("AddCoin", new object[] {
                        managerId,
                        coin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCoinAsync(System.Guid managerId, int coin) {
            this.AddCoinAsync(managerId, coin, null);
        }
        
        /// <remarks/>
        public void AddCoinAsync(System.Guid managerId, int coin, object userState) {
            if ((this.AddCoinOperationCompleted == null)) {
                this.AddCoinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCoinOperationCompleted);
            }
            this.InvokeAsync("AddCoin", new object[] {
                        managerId,
                        coin}, this.AddCoinOperationCompleted, userState);
        }
        
        private void OnAddCoinOperationCompleted(object arg) {
            if ((this.AddCoinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCoinCompleted(this, new AddCoinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/AddCoin2", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCoin2(System.Guid managerId, int coin, int sourceType) {
            object[] results = this.Invoke("AddCoin2", new object[] {
                        managerId,
                        coin,
                        sourceType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCoin2Async(System.Guid managerId, int coin, int sourceType) {
            this.AddCoin2Async(managerId, coin, sourceType, null);
        }
        
        /// <remarks/>
        public void AddCoin2Async(System.Guid managerId, int coin, int sourceType, object userState) {
            if ((this.AddCoin2OperationCompleted == null)) {
                this.AddCoin2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCoin2OperationCompleted);
            }
            this.InvokeAsync("AddCoin2", new object[] {
                        managerId,
                        coin,
                        sourceType}, this.AddCoin2OperationCompleted, userState);
        }
        
        private void OnAddCoin2OperationCompleted(object arg) {
            if ((this.AddCoin2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCoin2Completed(this, new AddCoin2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/Charge", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int Charge(string account, int sourceType, int cash, int point, int bonus, string orderId) {
            object[] results = this.Invoke("Charge", new object[] {
                        account,
                        sourceType,
                        cash,
                        point,
                        bonus,
                        orderId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChargeAsync(string account, int sourceType, int cash, int point, int bonus, string orderId) {
            this.ChargeAsync(account, sourceType, cash, point, bonus, orderId, null);
        }
        
        /// <remarks/>
        public void ChargeAsync(string account, int sourceType, int cash, int point, int bonus, string orderId, object userState) {
            if ((this.ChargeOperationCompleted == null)) {
                this.ChargeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargeOperationCompleted);
            }
            this.InvokeAsync("Charge", new object[] {
                        account,
                        sourceType,
                        cash,
                        point,
                        bonus,
                        orderId}, this.ChargeOperationCompleted, userState);
        }
        
        private void OnChargeOperationCompleted(object arg) {
            if ((this.ChargeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargeCompleted(this, new ChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/BuyPointShipments", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BuyPointShipments(string managerId, string orderId, string billingId, decimal cash, int mallCode) {
            object[] results = this.Invoke("BuyPointShipments", new object[] {
                        managerId,
                        orderId,
                        billingId,
                        cash,
                        mallCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BuyPointShipmentsAsync(string managerId, string orderId, string billingId, decimal cash, int mallCode) {
            this.BuyPointShipmentsAsync(managerId, orderId, billingId, cash, mallCode, null);
        }
        
        /// <remarks/>
        public void BuyPointShipmentsAsync(string managerId, string orderId, string billingId, decimal cash, int mallCode, object userState) {
            if ((this.BuyPointShipmentsOperationCompleted == null)) {
                this.BuyPointShipmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBuyPointShipmentsOperationCompleted);
            }
            this.InvokeAsync("BuyPointShipments", new object[] {
                        managerId,
                        orderId,
                        billingId,
                        cash,
                        mallCode}, this.BuyPointShipmentsOperationCompleted, userState);
        }
        
        private void OnBuyPointShipmentsOperationCompleted(object arg) {
            if ((this.BuyPointShipmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BuyPointShipmentsCompleted(this, new BuyPointShipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/IsRegist", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NbManagerEntity IsRegist(string openId, string serverNo) {
            object[] results = this.Invoke("IsRegist", new object[] {
                        openId,
                        serverNo});
            return ((NbManagerEntity)(results[0]));
        }
        
        /// <remarks/>
        public void IsRegistAsync(string openId, string serverNo) {
            this.IsRegistAsync(openId, serverNo, null);
        }
        
        /// <remarks/>
        public void IsRegistAsync(string openId, string serverNo, object userState) {
            if ((this.IsRegistOperationCompleted == null)) {
                this.IsRegistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegistOperationCompleted);
            }
            this.InvokeAsync("IsRegist", new object[] {
                        openId,
                        serverNo}, this.IsRegistOperationCompleted, userState);
        }
        
        private void OnIsRegistOperationCompleted(object arg) {
            if ((this.IsRegistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegistCompleted(this, new IsRegistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/IsRegistByName", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NbManagerEntity IsRegistByName(string name, string serverNo) {
            object[] results = this.Invoke("IsRegistByName", new object[] {
                        name,
                        serverNo});
            return ((NbManagerEntity)(results[0]));
        }
        
        /// <remarks/>
        public void IsRegistByNameAsync(string name, string serverNo) {
            this.IsRegistByNameAsync(name, serverNo, null);
        }
        
        /// <remarks/>
        public void IsRegistByNameAsync(string name, string serverNo, object userState) {
            if ((this.IsRegistByNameOperationCompleted == null)) {
                this.IsRegistByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegistByNameOperationCompleted);
            }
            this.InvokeAsync("IsRegistByName", new object[] {
                        name,
                        serverNo}, this.IsRegistByNameOperationCompleted, userState);
        }
        
        private void OnIsRegistByNameOperationCompleted(object arg) {
            if ((this.IsRegistByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegistByNameCompleted(this, new IsRegistByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/IsRegistByNameList", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NbManagerEntity[] IsRegistByNameList(string data) {
            object[] results = this.Invoke("IsRegistByNameList", new object[] {
                        data});
            return ((NbManagerEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void IsRegistByNameListAsync(string data) {
            this.IsRegistByNameListAsync(data, null);
        }
        
        /// <remarks/>
        public void IsRegistByNameListAsync(string data, object userState) {
            if ((this.IsRegistByNameListOperationCompleted == null)) {
                this.IsRegistByNameListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsRegistByNameListOperationCompleted);
            }
            this.InvokeAsync("IsRegistByNameList", new object[] {
                        data}, this.IsRegistByNameListOperationCompleted, userState);
        }
        
        private void OnIsRegistByNameListOperationCompleted(object arg) {
            if ((this.IsRegistByNameListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsRegistByNameListCompleted(this, new IsRegistByNameListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/GetManagerList", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NbManagerEntity[] GetManagerList(string account) {
            object[] results = this.Invoke("GetManagerList", new object[] {
                        account});
            return ((NbManagerEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetManagerListAsync(string account) {
            this.GetManagerListAsync(account, null);
        }
        
        /// <remarks/>
        public void GetManagerListAsync(string account, object userState) {
            if ((this.GetManagerListOperationCompleted == null)) {
                this.GetManagerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManagerListOperationCompleted);
            }
            this.InvokeAsync("GetManagerList", new object[] {
                        account}, this.GetManagerListOperationCompleted, userState);
        }
        
        private void OnGetManagerListOperationCompleted(object arg) {
            if ((this.GetManagerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManagerListCompleted(this, new GetManagerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/CheckActive", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckActive(string account) {
            object[] results = this.Invoke("CheckActive", new object[] {
                        account});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckActiveAsync(string account) {
            this.CheckActiveAsync(account, null);
        }
        
        /// <remarks/>
        public void CheckActiveAsync(string account, object userState) {
            if ((this.CheckActiveOperationCompleted == null)) {
                this.CheckActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckActiveOperationCompleted);
            }
            this.InvokeAsync("CheckActive", new object[] {
                        account}, this.CheckActiveOperationCompleted, userState);
        }
        
        private void OnCheckActiveOperationCompleted(object arg) {
            if ((this.CheckActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckActiveCompleted(this, new CheckActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/AttachmentReceive", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AttachmentReceive(System.Guid managerId, int recordId) {
            object[] results = this.Invoke("AttachmentReceive", new object[] {
                        managerId,
                        recordId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AttachmentReceiveAsync(System.Guid managerId, int recordId) {
            this.AttachmentReceiveAsync(managerId, recordId, null);
        }
        
        /// <remarks/>
        public void AttachmentReceiveAsync(System.Guid managerId, int recordId, object userState) {
            if ((this.AttachmentReceiveOperationCompleted == null)) {
                this.AttachmentReceiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAttachmentReceiveOperationCompleted);
            }
            this.InvokeAsync("AttachmentReceive", new object[] {
                        managerId,
                        recordId}, this.AttachmentReceiveOperationCompleted, userState);
        }
        
        private void OnAttachmentReceiveOperationCompleted(object arg) {
            if ((this.AttachmentReceiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AttachmentReceiveCompleted(this, new AttachmentReceiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/TxBuyItem", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TxBuyItem(string openId, string payItem, string token, string billno, string version, string zoneId, string amt, string payamt_coins, string pubacct_payamt_coins, int exchangeRate) {
            object[] results = this.Invoke("TxBuyItem", new object[] {
                        openId,
                        payItem,
                        token,
                        billno,
                        version,
                        zoneId,
                        amt,
                        payamt_coins,
                        pubacct_payamt_coins,
                        exchangeRate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TxBuyItemAsync(string openId, string payItem, string token, string billno, string version, string zoneId, string amt, string payamt_coins, string pubacct_payamt_coins, int exchangeRate) {
            this.TxBuyItemAsync(openId, payItem, token, billno, version, zoneId, amt, payamt_coins, pubacct_payamt_coins, exchangeRate, null);
        }
        
        /// <remarks/>
        public void TxBuyItemAsync(string openId, string payItem, string token, string billno, string version, string zoneId, string amt, string payamt_coins, string pubacct_payamt_coins, int exchangeRate, object userState) {
            if ((this.TxBuyItemOperationCompleted == null)) {
                this.TxBuyItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTxBuyItemOperationCompleted);
            }
            this.InvokeAsync("TxBuyItem", new object[] {
                        openId,
                        payItem,
                        token,
                        billno,
                        version,
                        zoneId,
                        amt,
                        payamt_coins,
                        pubacct_payamt_coins,
                        exchangeRate}, this.TxBuyItemOperationCompleted, userState);
        }
        
        private void OnTxBuyItemOperationCompleted(object arg) {
            if ((this.TxBuyItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TxBuyItemCompleted(this, new TxBuyItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/TxTaskStep", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TxTaskStep(string account, int activityId, int activityStep, string cmd, string billno) {
            object[] results = this.Invoke("TxTaskStep", new object[] {
                        account,
                        activityId,
                        activityStep,
                        cmd,
                        billno});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void TxTaskStepAsync(string account, int activityId, int activityStep, string cmd, string billno) {
            this.TxTaskStepAsync(account, activityId, activityStep, cmd, billno, null);
        }
        
        /// <remarks/>
        public void TxTaskStepAsync(string account, int activityId, int activityStep, string cmd, string billno, object userState) {
            if ((this.TxTaskStepOperationCompleted == null)) {
                this.TxTaskStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTxTaskStepOperationCompleted);
            }
            this.InvokeAsync("TxTaskStep", new object[] {
                        account,
                        activityId,
                        activityStep,
                        cmd,
                        billno}, this.TxTaskStepOperationCompleted, userState);
        }
        
        private void OnTxTaskStepOperationCompleted(object arg) {
            if ((this.TxTaskStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TxTaskStepCompleted(this, new TxTaskStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/KickSession", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool KickSession(System.Guid managerId) {
            object[] results = this.Invoke("KickSession", new object[] {
                        managerId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void KickSessionAsync(System.Guid managerId) {
            this.KickSessionAsync(managerId, null);
        }
        
        /// <remarks/>
        public void KickSessionAsync(System.Guid managerId, object userState) {
            if ((this.KickSessionOperationCompleted == null)) {
                this.KickSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKickSessionOperationCompleted);
            }
            this.InvokeAsync("KickSession", new object[] {
                        managerId}, this.KickSessionOperationCompleted, userState);
        }
        
        private void OnKickSessionOperationCompleted(object arg) {
            if ((this.KickSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KickSessionCompleted(this, new KickSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/LockUserUnexpect", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LockUserUnexpect(System.Guid managerId, string adminName, string memo) {
            object[] results = this.Invoke("LockUserUnexpect", new object[] {
                        managerId,
                        adminName,
                        memo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LockUserUnexpectAsync(System.Guid managerId, string adminName, string memo) {
            this.LockUserUnexpectAsync(managerId, adminName, memo, null);
        }
        
        /// <remarks/>
        public void LockUserUnexpectAsync(System.Guid managerId, string adminName, string memo, object userState) {
            if ((this.LockUserUnexpectOperationCompleted == null)) {
                this.LockUserUnexpectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockUserUnexpectOperationCompleted);
            }
            this.InvokeAsync("LockUserUnexpect", new object[] {
                        managerId,
                        adminName,
                        memo}, this.LockUserUnexpectOperationCompleted, userState);
        }
        
        private void OnLockUserUnexpectOperationCompleted(object arg) {
            if ((this.LockUserUnexpectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockUserUnexpectCompleted(this, new LockUserUnexpectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/ResetCache", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetCache(int cacheType) {
            object[] results = this.Invoke("ResetCache", new object[] {
                        cacheType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetCacheAsync(int cacheType) {
            this.ResetCacheAsync(cacheType, null);
        }
        
        /// <remarks/>
        public void ResetCacheAsync(int cacheType, object userState) {
            if ((this.ResetCacheOperationCompleted == null)) {
                this.ResetCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetCacheOperationCompleted);
            }
            this.InvokeAsync("ResetCache", new object[] {
                        cacheType}, this.ResetCacheOperationCompleted, userState);
        }
        
        private void OnResetCacheOperationCompleted(object arg) {
            if ((this.ResetCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetCacheCompleted(this, new ResetCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/CrowdStart", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CrowdStart(System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("CrowdStart", new object[] {
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CrowdStartAsync(System.DateTime startTime, System.DateTime endTime) {
            this.CrowdStartAsync(startTime, endTime, null);
        }
        
        /// <remarks/>
        public void CrowdStartAsync(System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.CrowdStartOperationCompleted == null)) {
                this.CrowdStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCrowdStartOperationCompleted);
            }
            this.InvokeAsync("CrowdStart", new object[] {
                        startTime,
                        endTime}, this.CrowdStartOperationCompleted, userState);
        }
        
        private void OnCrowdStartOperationCompleted(object arg) {
            if ((this.CrowdStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CrowdStartCompleted(this, new CrowdStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/PeakStart", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PeakStart(System.DateTime startTime, System.DateTime endTime) {
            object[] results = this.Invoke("PeakStart", new object[] {
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PeakStartAsync(System.DateTime startTime, System.DateTime endTime) {
            this.PeakStartAsync(startTime, endTime, null);
        }
        
        /// <remarks/>
        public void PeakStartAsync(System.DateTime startTime, System.DateTime endTime, object userState) {
            if ((this.PeakStartOperationCompleted == null)) {
                this.PeakStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPeakStartOperationCompleted);
            }
            this.InvokeAsync("PeakStart", new object[] {
                        startTime,
                        endTime}, this.PeakStartOperationCompleted, userState);
        }
        
        private void OnPeakStartOperationCompleted(object arg) {
            if ((this.PeakStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PeakStartCompleted(this, new PeakStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/CrowdSendPrize", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CrowdSendPrize(int crowdId) {
            object[] results = this.Invoke("CrowdSendPrize", new object[] {
                        crowdId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CrowdSendPrizeAsync(int crowdId) {
            this.CrowdSendPrizeAsync(crowdId, null);
        }
        
        /// <remarks/>
        public void CrowdSendPrizeAsync(int crowdId, object userState) {
            if ((this.CrowdSendPrizeOperationCompleted == null)) {
                this.CrowdSendPrizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCrowdSendPrizeOperationCompleted);
            }
            this.InvokeAsync("CrowdSendPrize", new object[] {
                        crowdId}, this.CrowdSendPrizeOperationCompleted, userState);
        }
        
        private void OnCrowdSendPrizeOperationCompleted(object arg) {
            if ((this.CrowdSendPrizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CrowdSendPrizeCompleted(this, new CrowdSendPrizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/AddManagerData", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MessageCode AddManagerData(System.Guid managerId, int prizeExp, int prizeCoin, int prizeSophisticate) {
            object[] results = this.Invoke("AddManagerData", new object[] {
                        managerId,
                        prizeExp,
                        prizeCoin,
                        prizeSophisticate});
            return ((MessageCode)(results[0]));
        }
        
        /// <remarks/>
        public void AddManagerDataAsync(System.Guid managerId, int prizeExp, int prizeCoin, int prizeSophisticate) {
            this.AddManagerDataAsync(managerId, prizeExp, prizeCoin, prizeSophisticate, null);
        }
        
        /// <remarks/>
        public void AddManagerDataAsync(System.Guid managerId, int prizeExp, int prizeCoin, int prizeSophisticate, object userState) {
            if ((this.AddManagerDataOperationCompleted == null)) {
                this.AddManagerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddManagerDataOperationCompleted);
            }
            this.InvokeAsync("AddManagerData", new object[] {
                        managerId,
                        prizeExp,
                        prizeCoin,
                        prizeSophisticate}, this.AddManagerDataOperationCompleted, userState);
        }
        
        private void OnAddManagerDataOperationCompleted(object arg) {
            if ((this.AddManagerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddManagerDataCompleted(this, new AddManagerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/GetOnlineCount", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOnlineCount() {
            object[] results = this.Invoke("GetOnlineCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOnlineCountAsync() {
            this.GetOnlineCountAsync(null);
        }
        
        /// <remarks/>
        public void GetOnlineCountAsync(object userState) {
            if ((this.GetOnlineCountOperationCompleted == null)) {
                this.GetOnlineCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnlineCountOperationCompleted);
            }
            this.InvokeAsync("GetOnlineCount", new object[0], this.GetOnlineCountOperationCompleted, userState);
        }
        
        private void OnGetOnlineCountOperationCompleted(object arg) {
            if ((this.GetOnlineCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnlineCountCompleted(this, new GetOnlineCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/SetSessionId", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetSessionId(string openId, string sessionId) {
            object[] results = this.Invoke("SetSessionId", new object[] {
                        openId,
                        sessionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSessionIdAsync(string openId, string sessionId) {
            this.SetSessionIdAsync(openId, sessionId, null);
        }
        
        /// <remarks/>
        public void SetSessionIdAsync(string openId, string sessionId, object userState) {
            if ((this.SetSessionIdOperationCompleted == null)) {
                this.SetSessionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSessionIdOperationCompleted);
            }
            this.InvokeAsync("SetSessionId", new object[] {
                        openId,
                        sessionId}, this.SetSessionIdOperationCompleted, userState);
        }
        
        private void OnSetSessionIdOperationCompleted(object arg) {
            if ((this.SetSessionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSessionIdCompleted(this, new SetSessionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/GetSessionId", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionId(string openId) {
            object[] results = this.Invoke("GetSessionId", new object[] {
                        openId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionIdAsync(string openId) {
            this.GetSessionIdAsync(openId, null);
        }
        
        /// <remarks/>
        public void GetSessionIdAsync(string openId, object userState) {
            if ((this.GetSessionIdOperationCompleted == null)) {
                this.GetSessionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionIdOperationCompleted);
            }
            this.InvokeAsync("GetSessionId", new object[] {
                        openId}, this.GetSessionIdOperationCompleted, userState);
        }
        
        private void OnGetSessionIdOperationCompleted(object arg) {
            if ((this.GetSessionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionIdCompleted(this, new GetSessionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/CheckLockStateNDate", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckLockStateNDate(System.Guid managerId) {
            object[] results = this.Invoke("CheckLockStateNDate", new object[] {
                        managerId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckLockStateNDateAsync(System.Guid managerId) {
            this.CheckLockStateNDateAsync(managerId, null);
        }
        
        /// <remarks/>
        public void CheckLockStateNDateAsync(System.Guid managerId, object userState) {
            if ((this.CheckLockStateNDateOperationCompleted == null)) {
                this.CheckLockStateNDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLockStateNDateOperationCompleted);
            }
            this.InvokeAsync("CheckLockStateNDate", new object[] {
                        managerId}, this.CheckLockStateNDateOperationCompleted, userState);
        }
        
        private void OnCheckLockStateNDateOperationCompleted(object arg) {
            if ((this.CheckLockStateNDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLockStateNDateCompleted(this, new CheckLockStateNDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/BreakLock", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BreakLock(System.Guid managerId, string GMName, string memo, string zoneId) {
            object[] results = this.Invoke("BreakLock", new object[] {
                        managerId,
                        GMName,
                        memo,
                        zoneId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BreakLockAsync(System.Guid managerId, string GMName, string memo, string zoneId) {
            this.BreakLockAsync(managerId, GMName, memo, zoneId, null);
        }
        
        /// <remarks/>
        public void BreakLockAsync(System.Guid managerId, string GMName, string memo, string zoneId, object userState) {
            if ((this.BreakLockOperationCompleted == null)) {
                this.BreakLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBreakLockOperationCompleted);
            }
            this.InvokeAsync("BreakLock", new object[] {
                        managerId,
                        GMName,
                        memo,
                        zoneId}, this.BreakLockOperationCompleted, userState);
        }
        
        private void OnBreakLockOperationCompleted(object arg) {
            if ((this.BreakLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BreakLockCompleted(this, new BreakLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nball.com/SendItemByShare", RequestNamespace="http://nball.com/", ResponseNamespace="http://nball.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendItemByShare(string name, int type) {
            object[] results = this.Invoke("SendItemByShare", new object[] {
                        name,
                        type});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendItemByShareAsync(string name, int type) {
            this.SendItemByShareAsync(name, type, null);
        }
        
        /// <remarks/>
        public void SendItemByShareAsync(string name, int type, object userState) {
            if ((this.SendItemByShareOperationCompleted == null)) {
                this.SendItemByShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendItemByShareOperationCompleted);
            }
            this.InvokeAsync("SendItemByShare", new object[] {
                        name,
                        type}, this.SendItemByShareOperationCompleted, userState);
        }
        
        private void OnSendItemByShareOperationCompleted(object arg) {
            if ((this.SendItemByShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendItemByShareCompleted(this, new SendItemByShareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.19408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nball.com/")]
    public partial class A8csdkStartgameEntity {
        
        private string openIdField;
        
        private string stateField;
        
        private string serverIdField;
        
        private string pfField;
        
        private string sessionIdField;
        
        private string jsNeedField;
        
        private string nickNameField;
        
        private string commonField;
        
        /// <remarks/>
        public string OpenId {
            get {
                return this.openIdField;
            }
            set {
                this.openIdField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string ServerId {
            get {
                return this.serverIdField;
            }
            set {
                this.serverIdField = value;
            }
        }
        
        /// <remarks/>
        public string Pf {
            get {
                return this.pfField;
            }
            set {
                this.pfField = value;
            }
        }
        
        /// <remarks/>
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        public string JsNeed {
            get {
                return this.jsNeedField;
            }
            set {
                this.jsNeedField = value;
            }
        }
        
        /// <remarks/>
        public string NickName {
            get {
                return this.nickNameField;
            }
            set {
                this.nickNameField = value;
            }
        }
        
        /// <remarks/>
        public string Common {
            get {
                return this.commonField;
            }
            set {
                this.commonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.19408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nball.com/")]
    public partial class NbManagerEntity {
        
        private System.Guid idxField;
        
        private string accountField;
        
        private string nameField;
        
        private string logoField;
        
        private int typeField;
        
        private int levelField;
        
        private int eXPField;
        
        private int sophisticateField;
        
        private int scoreField;
        
        private int coinField;
        
        private int reikiField;
        
        private int teammemberMaxField;
        
        private int trainSeatMaxField;
        
        private int vipLevelField;
        
        private int modField;
        
        private int statusField;
        
        private System.DateTime rowTimeField;
        
        private System.DateTime updateTimeField;
        
        private byte[] rowVersionField;
        
        private int friendShipPointField;
        
        private int levelupExpField;
        
        private int kpiField;
        
        private bool isLevelupField;
        
        private int tourLeagueField;
        
        private string functionListField;
        
        private int[] openFuncsField;
        
        private bool hasOpenTaskField;
        
        private int addCoinField;
        
        private int addExpField;
        
        private int coinSourceTypeField;
        
        private string coinOrderIdField;
        
        private int vigorField;
        
        private bool openLevelGiftField;
        
        private bool isYellowVipField;
        
        /// <remarks/>
        public System.Guid Idx {
            get {
                return this.idxField;
            }
            set {
                this.idxField = value;
            }
        }
        
        /// <remarks/>
        public string Account {
            get {
                return this.accountField;
            }
            set {
                this.accountField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Logo {
            get {
                return this.logoField;
            }
            set {
                this.logoField = value;
            }
        }
        
        /// <remarks/>
        public int Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        public int EXP {
            get {
                return this.eXPField;
            }
            set {
                this.eXPField = value;
            }
        }
        
        /// <remarks/>
        public int Sophisticate {
            get {
                return this.sophisticateField;
            }
            set {
                this.sophisticateField = value;
            }
        }
        
        /// <remarks/>
        public int Score {
            get {
                return this.scoreField;
            }
            set {
                this.scoreField = value;
            }
        }
        
        /// <remarks/>
        public int Coin {
            get {
                return this.coinField;
            }
            set {
                this.coinField = value;
            }
        }
        
        /// <remarks/>
        public int Reiki {
            get {
                return this.reikiField;
            }
            set {
                this.reikiField = value;
            }
        }
        
        /// <remarks/>
        public int TeammemberMax {
            get {
                return this.teammemberMaxField;
            }
            set {
                this.teammemberMaxField = value;
            }
        }
        
        /// <remarks/>
        public int TrainSeatMax {
            get {
                return this.trainSeatMaxField;
            }
            set {
                this.trainSeatMaxField = value;
            }
        }
        
        /// <remarks/>
        public int VipLevel {
            get {
                return this.vipLevelField;
            }
            set {
                this.vipLevelField = value;
            }
        }
        
        /// <remarks/>
        public int Mod {
            get {
                return this.modField;
            }
            set {
                this.modField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RowTime {
            get {
                return this.rowTimeField;
            }
            set {
                this.rowTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime UpdateTime {
            get {
                return this.updateTimeField;
            }
            set {
                this.updateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RowVersion {
            get {
                return this.rowVersionField;
            }
            set {
                this.rowVersionField = value;
            }
        }
        
        /// <remarks/>
        public int FriendShipPoint {
            get {
                return this.friendShipPointField;
            }
            set {
                this.friendShipPointField = value;
            }
        }
        
        /// <remarks/>
        public int LevelupExp {
            get {
                return this.levelupExpField;
            }
            set {
                this.levelupExpField = value;
            }
        }
        
        /// <remarks/>
        public int Kpi {
            get {
                return this.kpiField;
            }
            set {
                this.kpiField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLevelup {
            get {
                return this.isLevelupField;
            }
            set {
                this.isLevelupField = value;
            }
        }
        
        /// <remarks/>
        public int TourLeague {
            get {
                return this.tourLeagueField;
            }
            set {
                this.tourLeagueField = value;
            }
        }
        
        /// <remarks/>
        public string FunctionList {
            get {
                return this.functionListField;
            }
            set {
                this.functionListField = value;
            }
        }
        
        /// <remarks/>
        public int[] OpenFuncs {
            get {
                return this.openFuncsField;
            }
            set {
                this.openFuncsField = value;
            }
        }
        
        /// <remarks/>
        public bool HasOpenTask {
            get {
                return this.hasOpenTaskField;
            }
            set {
                this.hasOpenTaskField = value;
            }
        }
        
        /// <remarks/>
        public int AddCoin {
            get {
                return this.addCoinField;
            }
            set {
                this.addCoinField = value;
            }
        }
        
        /// <remarks/>
        public int AddExp {
            get {
                return this.addExpField;
            }
            set {
                this.addExpField = value;
            }
        }
        
        /// <remarks/>
        public int CoinSourceType {
            get {
                return this.coinSourceTypeField;
            }
            set {
                this.coinSourceTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CoinOrderId {
            get {
                return this.coinOrderIdField;
            }
            set {
                this.coinOrderIdField = value;
            }
        }
        
        /// <remarks/>
        public int Vigor {
            get {
                return this.vigorField;
            }
            set {
                this.vigorField = value;
            }
        }
        
        /// <remarks/>
        public bool OpenLevelGift {
            get {
                return this.openLevelGiftField;
            }
            set {
                this.openLevelGiftField = value;
            }
        }
        
        /// <remarks/>
        public bool IsYellowVip {
            get {
                return this.isYellowVipField;
            }
            set {
                this.isYellowVipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.19408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nball.com/")]
    public enum MessageCode {
        
        /// <remarks/>
        AdFailUpdatePack,
        
        /// <remarks/>
        BadRequest,
        
        /// <remarks/>
        WebServerException,
        
        /// <remarks/>
        ExecuteFail,
        
        /// <remarks/>
        Exception,
        
        /// <remarks/>
        SystemBusy,
        
        /// <remarks/>
        NbFunctionNotOpen,
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        NbParameterError,
        
        /// <remarks/>
        NbCoinShortage,
        
        /// <remarks/>
        NbPointShortage,
        
        /// <remarks/>
        NbNoDefineMessageCode,
        
        /// <remarks/>
        NbUpdateFail,
        
        /// <remarks/>
        NbLotteryNot,
        
        /// <remarks/>
        NbNowHook,
        
        /// <remarks/>
        NbDeleteFail,
        
        /// <remarks/>
        NbStaminaShortage,
        
        /// <remarks/>
        NbNoPackage,
        
        /// <remarks/>
        NbManagerLevelOver,
        
        /// <remarks/>
        NbRankAfter,
        
        /// <remarks/>
        NbUpdateFailPackage,
        
        /// <remarks/>
        NbUpdateFailManager,
        
        /// <remarks/>
        NbPrizeRepeat,
        
        /// <remarks/>
        NbMatchCd,
        
        /// <remarks/>
        NbMatchNoCd,
        
        /// <remarks/>
        NbDomainInvalid,
        
        /// <remarks/>
        NbBindPointShortage,
        
        /// <remarks/>
        LoginNoRegister,
        
        /// <remarks/>
        LoginNoLogin,
        
        /// <remarks/>
        LoginOnlineLock,
        
        /// <remarks/>
        LoginOnlineBump,
        
        /// <remarks/>
        LoginOnlineKick,
        
        /// <remarks/>
        LoginMultiManager,
        
        /// <remarks/>
        LoginNoUser,
        
        /// <remarks/>
        NoMergeZoneInfo,
        
        /// <remarks/>
        BindCodeNotExist,
        
        /// <remarks/>
        HaveSetName,
        
        /// <remarks/>
        LoginNoManager,
        
        /// <remarks/>
        LoginError,
        
        /// <remarks/>
        RegisterNameRepeat,
        
        /// <remarks/>
        RegisterNameContainBadWord,
        
        /// <remarks/>
        RegisterNameIsEmpty,
        
        /// <remarks/>
        RegisterNameHasValidWord,
        
        /// <remarks/>
        RegisterNameLengthRange,
        
        /// <remarks/>
        RegisterExistsManager,
        
        /// <remarks/>
        RegisterFail,
        
        /// <remarks/>
        RegisterNoTemplate,
        
        /// <remarks/>
        RegisterRealNameValid,
        
        /// <remarks/>
        RegisterCertIdValid,
        
        /// <remarks/>
        MatchCreateFail,
        
        /// <remarks/>
        MatchWait,
        
        /// <remarks/>
        MatchMiss,
        
        /// <remarks/>
        MatchStateObjisNull,
        
        /// <remarks/>
        MainPlayerNoStrength,
        
        /// <remarks/>
        TrainPlayerNoStrength,
        
        /// <remarks/>
        ItemsNotSell,
        
        /// <remarks/>
        PlayerHaveEquipment,
        
        /// <remarks/>
        ProtectItemNot,
        
        /// <remarks/>
        ItemNotSell,
        
        /// <remarks/>
        ItemPackageFull,
        
        /// <remarks/>
        ItemNotExists,
        
        /// <remarks/>
        ItemIsLocked,
        
        /// <remarks/>
        ItemIsBinding,
        
        /// <remarks/>
        ItemEquipmentNotExists,
        
        /// <remarks/>
        ItemIdRepeat,
        
        /// <remarks/>
        ItemPropertyIsNull,
        
        /// <remarks/>
        ItemStrengthInvalid,
        
        /// <remarks/>
        ItemStrengthNoConfig,
        
        /// <remarks/>
        ItemStrengthProtectShortage,
        
        /// <remarks/>
        ItemSynthesisNoConfig,
        
        /// <remarks/>
        ItemSynthesisDiffCardlevel,
        
        /// <remarks/>
        ItemCountInvalid,
        
        /// <remarks/>
        ItemDecomposeInvalid,
        
        /// <remarks/>
        ItemDecomposeNoConfig,
        
        /// <remarks/>
        ItemEquipmentSynthesisNoConfig,
        
        /// <remarks/>
        ItemEquipmentSynthesisQuality1,
        
        /// <remarks/>
        ItemEquipmentSynthesisCardOver,
        
        /// <remarks/>
        ItemEquipmentSynthesisFormulaInvalid,
        
        /// <remarks/>
        ItemEquipmentSynthesisNoSuitdrawing,
        
        /// <remarks/>
        ItemPackageFullToMail,
        
        /// <remarks/>
        ItemNoShadow,
        
        /// <remarks/>
        ItemLapOver,
        
        /// <remarks/>
        ItemMosaicColorNotMatch,
        
        /// <remarks/>
        ItemWashStoneNotMatch,
        
        /// <remarks/>
        ItemBallsoulLevelOver,
        
        /// <remarks/>
        ItemWashStoneLevelOver,
        
        /// <remarks/>
        ItemSplitCountOver,
        
        /// <remarks/>
        ItemLuckyParameterError,
        
        /// <remarks/>
        ItemSynthesisWildcardCoutOver,
        
        /// <remarks/>
        ItemSynthesisMallCountShortage,
        
        /// <remarks/>
        ItemSynthesisWildcardQualityError,
        
        /// <remarks/>
        ItemNewplayerPackCantDelete,
        
        /// <remarks/>
        ItemCopyCardTypeError,
        
        /// <remarks/>
        ItemIsCopyedCard,
        
        /// <remarks/>
        ItemUpgradeItemCountShortage,
        
        /// <remarks/>
        ItemEquipmentLeverError,
        
        /// <remarks/>
        NonePrecisionCastingProperty,
        
        /// <remarks/>
        PrecisionCastingMaxChoice,
        
        /// <remarks/>
        PrecisionCastingMethod,
        
        /// <remarks/>
        HookItemCountShortage,
        
        /// <remarks/>
        NoneEliteHookSuperPrize,
        
        /// <remarks/>
        ItemLevelOver,
        
        /// <remarks/>
        ItemCountNot,
        
        /// <remarks/>
        ItemCountNot1,
        
        /// <remarks/>
        ItemExchangeMedalNoconfig,
        
        /// <remarks/>
        NoItemExchangeMedal,
        
        /// <remarks/>
        MedalExchangeItemNoconfig,
        
        /// <remarks/>
        MedalShortage,
        
        /// <remarks/>
        TeammemberNotPlary,
        
        /// <remarks/>
        LadderBusy,
        
        /// <remarks/>
        LadderGrouping,
        
        /// <remarks/>
        LadderCountdown,
        
        /// <remarks/>
        LadderClose,
        
        /// <remarks/>
        LadderMatchNotExists,
        
        /// <remarks/>
        LadderExchangeScoreShortage,
        
        /// <remarks/>
        LadderExchangeHonorShortage,
        
        /// <remarks/>
        LadderNoSeason,
        
        /// <remarks/>
        LadderSeasonDonotNeedSend,
        
        /// <remarks/>
        LadderStaminaShortage,
        
        /// <remarks/>
        LadderExchangeTimesOver,
        
        /// <remarks/>
        LadderMatchCding,
        
        /// <remarks/>
        LadderCdEnd,
        
        /// <remarks/>
        TourEliteCountLimit,
        
        /// <remarks/>
        TourEliteResetCountLimit,
        
        /// <remarks/>
        TourHookOver,
        
        /// <remarks/>
        TourStageNotEnable,
        
        /// <remarks/>
        TourLotteryRepeat,
        
        /// <remarks/>
        TourStageNotExists,
        
        /// <remarks/>
        TourStageNotPass,
        
        /// <remarks/>
        TourHookBusy,
        
        /// <remarks/>
        TourHookFightTimesOver,
        
        /// <remarks/>
        TourHookHasFinish,
        
        /// <remarks/>
        TourHookMatchNotExists,
        
        /// <remarks/>
        TourHasLottery,
        
        /// <remarks/>
        TourMatchWait,
        
        /// <remarks/>
        TourMatchLoop,
        
        /// <remarks/>
        TourNoPassPrize,
        
        /// <remarks/>
        TourPassPrizeHasReceive,
        
        /// <remarks/>
        TeammemberGrowMax,
        
        /// <remarks/>
        TeammemberGrowUp,
        
        /// <remarks/>
        TeammemberGrowShortage,
        
        /// <remarks/>
        TeammemberReikiShortage,
        
        /// <remarks/>
        TeammemberSophisticateShortage,
        
        /// <remarks/>
        TeammemberRepeat,
        
        /// <remarks/>
        TeammemberOver,
        
        /// <remarks/>
        TeammemberInvalidCount,
        
        /// <remarks/>
        TeammemberSolutionPlayerRepeat,
        
        /// <remarks/>
        TeammemberInvalidPlayer,
        
        /// <remarks/>
        TeammemberIsMain,
        
        /// <remarks/>
        TeammemberHasEquip,
        
        /// <remarks/>
        TeammemberCardNotMatch,
        
        /// <remarks/>
        TeammemberFormationLevelMax,
        
        /// <remarks/>
        TeammemberFormationLevelOver,
        
        /// <remarks/>
        TeammemberTrainLevelOver,
        
        /// <remarks/>
        TeammemberTrainSeatOver,
        
        /// <remarks/>
        TeammemberTraining,
        
        /// <remarks/>
        TeammemberTrainNotin,
        
        /// <remarks/>
        TeammemberTrainNoStamina,
        
        /// <remarks/>
        TeammemberTrainFinish,
        
        /// <remarks/>
        TeammemberPropertyShortage,
        
        /// <remarks/>
        TeammemberPropertyOver,
        
        /// <remarks/>
        TeammemberVeteranCountOver,
        
        /// <remarks/>
        TeammemberNotExists,
        
        /// <remarks/>
        TeammemberCardLevelOver,
        
        /// <remarks/>
        TeammemberPowerOver,
        
        /// <remarks/>
        TeammemberUsedPropertyShortage,
        
        /// <remarks/>
        TeammemberTrainingNoInherit,
        
        /// <remarks/>
        TeammemberArousalShortage,
        
        /// <remarks/>
        TeammemberArousalMax,
        
        /// <remarks/>
        SpeedUpItemCodeNumber,
        
        /// <remarks/>
        TeammemberNotMain,
        
        /// <remarks/>
        TeammemberCantDecompose,
        
        /// <remarks/>
        TeammemberTrainLevelNoAddExp,
        
        /// <remarks/>
        TeammemberCantSell,
        
        /// <remarks/>
        TeammemberTrainSell,
        
        /// <remarks/>
        TeammemberTrainSkill,
        
        /// <remarks/>
        MallBuyCountLimit,
        
        /// <remarks/>
        MallAddStaminaLimit,
        
        /// <remarks/>
        MallAddTrainSeatLimit,
        
        /// <remarks/>
        MallBuyPackageCountLimit,
        
        /// <remarks/>
        MallResetEliteLimit,
        
        /// <remarks/>
        MallItemNotExists,
        
        /// <remarks/>
        MallStaminaOver,
        
        /// <remarks/>
        MallBuyStaminaCheck,
        
        /// <remarks/>
        MallBuyPackageCheck,
        
        /// <remarks/>
        MallBuyTrainSeatCheck,
        
        /// <remarks/>
        MallResetEliteCheck,
        
        /// <remarks/>
        MallQuickenTrainCheck,
        
        /// <remarks/>
        MallItemInvalidBuy,
        
        /// <remarks/>
        MallBuySubstitute,
        
        /// <remarks/>
        MallUsedNewPlayerPack,
        
        /// <remarks/>
        MallUsedNoRestTeammember,
        
        /// <remarks/>
        MallUsedLevelShortage,
        
        /// <remarks/>
        MallAddPkCount,
        
        /// <remarks/>
        MallItemBuyFail,
        
        /// <remarks/>
        GoldmallExpired,
        
        /// <remarks/>
        GoldmallBuyMax,
        
        /// <remarks/>
        TeammemberGrowLevelShortage,
        
        /// <remarks/>
        MallStaminaGiftNoTime,
        
        /// <remarks/>
        BuyPointFail,
        
        /// <remarks/>
        TxBuyPointFail,
        
        /// <remarks/>
        FirstChargeNot,
        
        /// <remarks/>
        DailycupNoMatch,
        
        /// <remarks/>
        DailycupNoMatchTomorrow,
        
        /// <remarks/>
        DailycupAttendRepeat,
        
        /// <remarks/>
        DailycupTimeOut,
        
        /// <remarks/>
        DailycupInsCompetitorFail,
        
        /// <remarks/>
        DailycupGambleClosed,
        
        /// <remarks/>
        DailycupGamebleCountLimit,
        
        /// <remarks/>
        DailycupGamblePointLimit,
        
        /// <remarks/>
        DailycupGambleStrengthenLimit,
        
        /// <remarks/>
        DailycupgGambleCardlevelOver,
        
        /// <remarks/>
        DailycupNotExists,
        
        /// <remarks/>
        DailycupStatusNotClose,
        
        /// <remarks/>
        DailycupStatusNotEnd,
        
        /// <remarks/>
        DailycupGambleOpened,
        
        /// <remarks/>
        DailycupNoCompetitors,
        
        /// <remarks/>
        DailycupNotimetoSendPrize,
        
        /// <remarks/>
        DailycupNottimetoRun,
        
        /// <remarks/>
        DailycupStatusNotOpen,
        
        /// <remarks/>
        ScoutingLotteryFail,
        
        /// <remarks/>
        ScoutingCoinTenVipLevelShortage,
        
        /// <remarks/>
        LeagueIdMarkNotLock,
        
        /// <remarks/>
        LeagueHasStart,
        
        /// <remarks/>
        LeagueMatchHasReMatched,
        
        /// <remarks/>
        LeagueNoEnd,
        
        /// <remarks/>
        LeaguePrizeReceivedToday,
        
        /// <remarks/>
        LeagueNotChampion,
        
        /// <remarks/>
        LeagueMatchHasFight,
        
        /// <remarks/>
        LeagueMatchWheelNotRight,
        
        /// <remarks/>
        LeagueMatchConfirmed,
        
        /// <remarks/>
        LeagueStaminaNotEnough,
        
        /// <remarks/>
        LeagueExchangeTimesOver,
        
        /// <remarks/>
        LeagueExchangeHonorShortage,
        
        /// <remarks/>
        LeagueWincountPrizeCannotReceive,
        
        /// <remarks/>
        LeagueWincountPrizeReceived,
        
        /// <remarks/>
        LeagueHavePass,
        
        /// <remarks/>
        LeagueMatchNotConfirmed,
        
        /// <remarks/>
        LeagueNotStart,
        
        /// <remarks/>
        LeaguePrizeNotGet,
        
        /// <remarks/>
        TaskNoConfig,
        
        /// <remarks/>
        TaskSubmitInvalid,
        
        /// <remarks/>
        TaskNoDaily,
        
        /// <remarks/>
        TaskDailyLevelShortage,
        
        /// <remarks/>
        TaskDailyCountOver,
        
        /// <remarks/>
        MailNoAttachment,
        
        /// <remarks/>
        MailAttachmentReceiveRepeat,
        
        /// <remarks/>
        MailNoAttachmentBatch,
        
        /// <remarks/>
        GambleTitleNoExist,
        
        /// <remarks/>
        ThisGambleTitleIsOfficial,
        
        /// <remarks/>
        GambleParamError,
        
        /// <remarks/>
        GambleNotEnoughMoney,
        
        /// <remarks/>
        GambleHostsIsFull,
        
        /// <remarks/>
        GamblePayError,
        
        /// <remarks/>
        GambleNotStart,
        
        /// <remarks/>
        GambleStoped,
        
        /// <remarks/>
        GambleUareNotHost,
        
        /// <remarks/>
        GambleAddMoneyError,
        
        /// <remarks/>
        GambleTooPoor,
        
        /// <remarks/>
        GambleNeedMoreTotalMoney,
        
        /// <remarks/>
        GambleTooManyPeopleIsGambling,
        
        /// <remarks/>
        GambleOnlyOnce,
        
        /// <remarks/>
        GambleHostRateInsertError,
        
        /// <remarks/>
        GambleCannotGambleSelf,
        
        /// <remarks/>
        ChatMsgIsEmpty,
        
        /// <remarks/>
        ChatMsgLengthRange,
        
        /// <remarks/>
        HaveBannedToPost,
        
        /// <remarks/>
        FriendNotExistsName,
        
        /// <remarks/>
        FriendHasExists,
        
        /// <remarks/>
        FriendIsByBlack,
        
        /// <remarks/>
        FriendCountOver,
        
        /// <remarks/>
        FriendNotSelf,
        
        /// <remarks/>
        FriendHelpTrainOver,
        
        /// <remarks/>
        FriendByHelpTrainOver,
        
        /// <remarks/>
        FriendDayHelpOver,
        
        /// <remarks/>
        FriendMatchWait,
        
        /// <remarks/>
        FriendBlackExists,
        
        /// <remarks/>
        FriendInviteNotCount,
        
        /// <remarks/>
        FriendshipPointShortage,
        
        /// <remarks/>
        FriendMatchOver,
        
        /// <remarks/>
        FriendBoxHasOpen,
        
        /// <remarks/>
        FriendBoxCountOver,
        
        /// <remarks/>
        ActivityNoPrize,
        
        /// <remarks/>
        ActivityHasReceive,
        
        /// <remarks/>
        ActivityNoConfigPrize,
        
        /// <remarks/>
        ActivityStatusNotSend,
        
        /// <remarks/>
        ActivityConfigPrizeIsNull,
        
        /// <remarks/>
        ActivityReceiveFail,
        
        /// <remarks/>
        ActivityPrizeJobSending,
        
        /// <remarks/>
        InvestDeposited,
        
        /// <remarks/>
        UserNotItemCode,
        
        /// <remarks/>
        ExchangeCodeNotExists,
        
        /// <remarks/>
        ExchangeIsUsed,
        
        /// <remarks/>
        ExchangeBatchLimit,
        
        /// <remarks/>
        PlayerKillMatchWait,
        
        /// <remarks/>
        PlayerKillTimesOver,
        
        /// <remarks/>
        PlayerKillByTimesOver,
        
        /// <remarks/>
        PlayerKillRevenged,
        
        /// <remarks/>
        PlayerKillNoSelf,
        
        /// <remarks/>
        PlayerKillMinLevel,
        
        /// <remarks/>
        PlayerKillBuyTimesOver,
        
        /// <remarks/>
        PlayerKillWinOver,
        
        /// <remarks/>
        PlayerKillNoAway,
        
        /// <remarks/>
        LackofGold,
        
        /// <remarks/>
        LackofCoin,
        
        /// <remarks/>
        LackofManagerLevel,
        
        /// <remarks/>
        LackofVipLevel,
        
        /// <remarks/>
        FaillCostGold,
        
        /// <remarks/>
        FailCostCoin,
        
        /// <remarks/>
        FailUpdate,
        
        /// <remarks/>
        InvalidArgs,
        
        /// <remarks/>
        MissManager,
        
        /// <remarks/>
        InvalidOp,
        
        /// <remarks/>
        MissManagers,
        
        /// <remarks/>
        InvalidCrossConfig,
        
        /// <remarks/>
        SkillInvalidCid,
        
        /// <remarks/>
        SkillMissConfig,
        
        /// <remarks/>
        SkillExpNotFind,
        
        /// <remarks/>
        SkillMissCard,
        
        /// <remarks/>
        SkillExpNotEnough,
        
        /// <remarks/>
        SkillMixOverCardLevel,
        
        /// <remarks/>
        SkillMixMissSameCard,
        
        /// <remarks/>
        SkillAskInvalidAskno,
        
        /// <remarks/>
        SkillAskMissNpc,
        
        /// <remarks/>
        SkillAskLackofCells,
        
        /// <remarks/>
        SkillAskLackofCoin,
        
        /// <remarks/>
        SkillAskExistsNpc,
        
        /// <remarks/>
        SkillPickLackofCells,
        
        /// <remarks/>
        SkillPickMissCardList,
        
        /// <remarks/>
        SkillSetInvalidArgs,
        
        /// <remarks/>
        SkillSetLackofCells,
        
        /// <remarks/>
        SkillSetLimitRepeat,
        
        /// <remarks/>
        TalentMissConfig,
        
        /// <remarks/>
        WillMissConfig,
        
        /// <remarks/>
        TalentHitLackofManagerLevel,
        
        /// <remarks/>
        TalentHitExisits,
        
        /// <remarks/>
        TalentHitLimitStep,
        
        /// <remarks/>
        TalentHitLimitNumber,
        
        /// <remarks/>
        TalentSetMiss,
        
        /// <remarks/>
        TalentSetUnable,
        
        /// <remarks/>
        TalentSetLimitRepeat,
        
        /// <remarks/>
        TalentResetMiss,
        
        /// <remarks/>
        WillPutExists,
        
        /// <remarks/>
        WillPutExistsCard,
        
        /// <remarks/>
        WillPutMissCard,
        
        /// <remarks/>
        WillPutUnfitCard,
        
        /// <remarks/>
        WillPutUnfitCardStrength,
        
        /// <remarks/>
        WillSetMiss,
        
        /// <remarks/>
        WillSetUnable,
        
        /// <remarks/>
        WillSetLimitNumber,
        
        /// <remarks/>
        WillCardMain,
        
        /// <remarks/>
        MSkillTypeNotMatching,
        
        /// <remarks/>
        MSkillMaxPoint,
        
        /// <remarks/>
        MSkillNotRequireSeries,
        
        /// <remarks/>
        FirstTransfer,
        
        /// <remarks/>
        HaveFirstTransfer,
        
        /// <remarks/>
        AdMissManager,
        
        /// <remarks/>
        PaySuccess,
        
        /// <remarks/>
        PayOrderIsExist,
        
        /// <remarks/>
        PayCreateAccountFail,
        
        /// <remarks/>
        PayUpdatePointFail,
        
        /// <remarks/>
        PayInsertPayHistoryFail,
        
        /// <remarks/>
        PayNoPayAccount,
        
        /// <remarks/>
        PayNoEnoughPoint,
        
        /// <remarks/>
        PayTakePointFail,
        
        /// <remarks/>
        PayInsertConsumeHistoryFail,
        
        /// <remarks/>
        PayDuplicateConsume,
        
        /// <remarks/>
        PayNoActiveGame,
        
        /// <remarks/>
        PayNoOrderId,
        
        /// <remarks/>
        PayCreateItemFail,
        
        /// <remarks/>
        PayCashFail,
        
        /// <remarks/>
        NotSufficientFunds,
        
        /// <remarks/>
        VigorInsufficient,
        
        /// <remarks/>
        HiringACoachFail,
        
        /// <remarks/>
        UnknownCoach,
        
        /// <remarks/>
        PrestigeInsufficient,
        
        /// <remarks/>
        CoachReachTheLimit,
        
        /// <remarks/>
        AlreadyHaveCoach,
        
        /// <remarks/>
        NotToHireCoach,
        
        /// <remarks/>
        ChangeCoachFail,
        
        /// <remarks/>
        OnlyOneCoach,
        
        /// <remarks/>
        ExpelCoachFail,
        
        /// <remarks/>
        VigorNotEnough,
        
        /// <remarks/>
        ThereIsNoSkills,
        
        /// <remarks/>
        ByIGreaterThanInherit,
        
        /// <remarks/>
        UpgradeVigorNotEnough,
        
        /// <remarks/>
        NotUseCoach,
        
        /// <remarks/>
        BeBCoach,
        
        /// <remarks/>
        CoachLevelNotManager,
        
        /// <remarks/>
        ActiveNotReceive,
        
        /// <remarks/>
        ActiveReceive,
        
        /// <remarks/>
        ActiveNotIntegral,
        
        /// <remarks/>
        ActiveHaveComplete,
        
        /// <remarks/>
        ActiveNotPrize,
        
        /// <remarks/>
        InvestGetTomorrow,
        
        /// <remarks/>
        EuroCardOnly,
        
        /// <remarks/>
        NoProtectCard,
        
        /// <remarks/>
        NotProtectCard,
        
        /// <remarks/>
        SilverCardCannotSynthesis,
        
        /// <remarks/>
        MainPlayerCannotSynthesis,
        
        /// <remarks/>
        PrizeHaveSend,
        
        /// <remarks/>
        NotVip,
        
        /// <remarks/>
        HasReceiveToday,
        
        /// <remarks/>
        NotSellPrpo,
        
        /// <remarks/>
        MaxThePrpo,
        
        /// <remarks/>
        AlreadyShare,
        
        /// <remarks/>
        MaxShareNumber,
        
        /// <remarks/>
        NowShareNotPrize,
        
        /// <remarks/>
        NotHaveMatch,
        
        /// <remarks/>
        HaveGambleTime,
        
        /// <remarks/>
        HaveGamble,
        
        /// <remarks/>
        PointConfigNotHave,
        
        /// <remarks/>
        Match2HoursEnd,
        
        /// <remarks/>
        LuckyCoinInsufficient,
        
        /// <remarks/>
        TurntableNotReset,
        
        /// <remarks/>
        ItemNotUpgradeTheStar,
        
        /// <remarks/>
        MaxTheStar,
        
        /// <remarks/>
        PlayerInsufficient,
        
        /// <remarks/>
        PotentialNot,
        
        /// <remarks/>
        JsonException,
        
        /// <remarks/>
        ParameterIsNull,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void SetStartGameEntityCompletedEventHandler(object sender, SetStartGameEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetStartGameEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetStartGameEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void GetStartgameEntityCompletedEventHandler(object sender, GetStartgameEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStartgameEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStartgameEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public A8csdkStartgameEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((A8csdkStartgameEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void AddCoinCompletedEventHandler(object sender, AddCoinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCoinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCoinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void AddCoin2CompletedEventHandler(object sender, AddCoin2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCoin2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCoin2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void ChargeCompletedEventHandler(object sender, ChargeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void BuyPointShipmentsCompletedEventHandler(object sender, BuyPointShipmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BuyPointShipmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BuyPointShipmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void IsRegistCompletedEventHandler(object sender, IsRegistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NbManagerEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NbManagerEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void IsRegistByNameCompletedEventHandler(object sender, IsRegistByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegistByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegistByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NbManagerEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NbManagerEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void IsRegistByNameListCompletedEventHandler(object sender, IsRegistByNameListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsRegistByNameListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsRegistByNameListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NbManagerEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NbManagerEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void GetManagerListCompletedEventHandler(object sender, GetManagerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetManagerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetManagerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NbManagerEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NbManagerEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void CheckActiveCompletedEventHandler(object sender, CheckActiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckActiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckActiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void AttachmentReceiveCompletedEventHandler(object sender, AttachmentReceiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttachmentReceiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AttachmentReceiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void TxBuyItemCompletedEventHandler(object sender, TxBuyItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TxBuyItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TxBuyItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void TxTaskStepCompletedEventHandler(object sender, TxTaskStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TxTaskStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TxTaskStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void KickSessionCompletedEventHandler(object sender, KickSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KickSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KickSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void LockUserUnexpectCompletedEventHandler(object sender, LockUserUnexpectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockUserUnexpectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockUserUnexpectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void ResetCacheCompletedEventHandler(object sender, ResetCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void CrowdStartCompletedEventHandler(object sender, CrowdStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CrowdStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CrowdStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void PeakStartCompletedEventHandler(object sender, PeakStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PeakStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PeakStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void CrowdSendPrizeCompletedEventHandler(object sender, CrowdSendPrizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CrowdSendPrizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CrowdSendPrizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void AddManagerDataCompletedEventHandler(object sender, AddManagerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddManagerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddManagerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MessageCode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MessageCode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void GetOnlineCountCompletedEventHandler(object sender, GetOnlineCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnlineCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnlineCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void SetSessionIdCompletedEventHandler(object sender, SetSessionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void GetSessionIdCompletedEventHandler(object sender, GetSessionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void CheckLockStateNDateCompletedEventHandler(object sender, CheckLockStateNDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckLockStateNDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckLockStateNDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void BreakLockCompletedEventHandler(object sender, BreakLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BreakLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BreakLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void SendItemByShareCompletedEventHandler(object sender, SendItemByShareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendItemByShareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendItemByShareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
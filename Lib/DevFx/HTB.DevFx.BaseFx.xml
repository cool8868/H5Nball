<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HTB.DevFx.BaseFx</name>
    </assembly>
    <members>
        <member name="T:HTB.DevFx.Cache.Cache">
            <summary>
            实行缓存器接口的存储器类
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.ICache">
            <summary>
            缓存器接口
            </summary>
            <remarks>
            缓存器的配置：
            	<code>
            		&lt;configuration&gt;
            			......
            			
            			&lt;cache type="HTB.DevFx.Cache.CacheManager"&gt;
            				&lt;caches&gt;
            					......
            					&lt;cache name="缓存器名称" type="缓存器类型" interval="检查过期的时间间隔，0或小于0表示不进行检查"&gt;
            						&lt;!--这里配置缓存存储器--&gt;
            						&lt;cacheStorage type="HTB.DevFx.Cache.NullCacheStorage" /&gt;
            					&lt;/cache&gt;
            					......
            				&lt;/caches&gt;
            			&lt;/cache&gt;
            			
            			......
            		&lt;/configuration&gt;
            	</code>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Add(System.String,System.Object,HTB.DevFx.Cache.ICacheDependency)">
            <summary>
            添加一项到缓存器中
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="value">缓存的对象</param>
            <param name="cacheDependency">缓存项的过期策略</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Add(System.String,System.Object)">
            <summary>
            添加一项到缓存器中
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="value">缓存的对象</param>
            <remarks>
            没有指定过期策略，则使用永不过期策略缓存
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="key">缓存项的健值</param>
            <returns>缓存的对象，如果缓存中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="key">缓存项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Contains(System.String)">
            <summary>
            判断缓存器中是否包含指定健值的缓存项
            </summary>
            <param name="key">缓存项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICache.Clear">
            <summary>
            清除此缓存器中所有的项
            </summary>
            <remarks>
            不影响配置文件中其他缓存器
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Cache.ICache.Name">
            <summary>
            缓存器名称
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.ICache.Item(System.String)">
            <summary>
            以健值方式获取/设置缓存项（值）
            </summary>
            <param name="key">缓存项的健值</param>
            <remarks>
            如果是设置值，则使用永不过期策略缓存
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Cache.ICache.Item(System.String,HTB.DevFx.Cache.ICacheDependency)">
            <summary>
            按指定健值和过期策略来设置缓存项（值）
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="cacheDependency">缓存项的过期策略</param>
        </member>
        <member name="P:HTB.DevFx.Cache.ICache.Count">
            <summary>
            获取此缓存器所缓存项的个数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.#ctor(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            构造函数
            </summary>
            <param name="setting">缓存器的配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.#ctor(HTB.DevFx.Cache.ICacheStorage,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="cacheStorage">指定存储器</param>
            <param name="interval">检测的间隔时间</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Init(HTB.DevFx.Cache.ICacheStorage,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="cacheStorage">指定存储器</param>
            <param name="interval">检测的间隔时间</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Add(System.String,System.Object,HTB.DevFx.Cache.ICacheDependency)">
            <summary>
            添加一项到缓存器中
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="value">缓存的对象</param>
            <param name="cacheDependency">缓存项的过期策略</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Add(System.String,System.Object)">
            <summary>
            添加一项到缓存器中
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="value">缓存的对象</param>
            <remarks>
            没有指定过期策略，则使用永不过期策略缓存
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="key">缓存项的健值</param>
            <returns>缓存的对象，如果缓存中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="key">缓存项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Contains(System.String)">
            <summary>
            判断缓存器中是否包含指定健值的缓存项
            </summary>
            <param name="key">缓存项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.Cache.Clear">
            <summary>
            清除此缓存器中所有的项
            </summary>
            <remarks>
            不影响配置文件中其他缓存器
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Cache.Cache.Name">
            <summary>
            缓存器名称
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.Cache.Item(System.String)">
            <summary>
            以健值方式获取/设置缓存项（值）
            </summary>
            <param name="key">缓存项的健值</param>
            <remarks>
            如果是设置值，则使用永不过期策略缓存
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Cache.Cache.Item(System.String,HTB.DevFx.Cache.ICacheDependency)">
            <summary>
            按指定健值和过期策略来设置缓存项（值）
            </summary>
            <param name="key">缓存项的健值</param>
            <param name="cacheDependency">缓存项的过期策略</param>
        </member>
        <member name="P:HTB.DevFx.Cache.Cache.Count">
            <summary>
            获取此缓存器所缓存项的个数
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.CacheException">
            <summary>
            缓存模块异常
            </summary>
            <remarks>
            在缓存模块里面，能发现的异常都会包装成此类的实例
            </remarks>
        </member>
        <member name="T:HTB.DevFx.ExceptionManagement.BaseException">
            <summary>
            异常模块异常，框架的基础异常类，所有的异常请从本类派生
            </summary>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="F:HTB.DevFx.ExceptionManagement.BaseException.errorNo">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.FindSourceException(System.Exception)">
            <summary>
            查找原始的异常
            </summary>
            <param name="e">异常</param>
            <returns>原始的异常</returns>
        </member>
        <member name="M:HTB.DevFx.ExceptionManagement.BaseException.FindSourceException(System.Exception,System.Type)">
            <summary>
            从异常树种查找指定类型的异常
            </summary>
            <param name="e">异常</param>
            <param name="expectedExceptionType">期待的异常类型</param>
            <returns>所要求的异常，如果找不到，返回null</returns>
        </member>
        <member name="P:HTB.DevFx.ExceptionManagement.BaseException.ErrorNo">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheException.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:HTB.DevFx.Cache.CacheHelper">
            <summary>
            缓存实用方法类
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheHelper.GetCache(System.String)">
            <summary>
            获取已配置的缓存器
            </summary>
            <param name="cacheName">配置文件中配置的缓存器名称</param>
            <returns>ICache的实例</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheHelper.GetCacheValue(System.String,System.String)">
            <summary>
            获取缓存项值
            </summary>
            <param name="cacheName">配置文件中配置的缓存器名称</param>
            <param name="key">缓存项健值</param>
            <returns>缓存项值，如果没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheHelper.GetCacheValue(System.String,System.String,System.Boolean)">
            <summary>
            获取缓存项值
            </summary>
            <param name="cacheName">配置文件中配置的缓存器名称</param>
            <param name="key">缓存项健值</param>
            <param name="throwOnError">如果有错误，是否抛出异常</param>
            <returns>缓存项值，如果没有命中，则返回<c>null</c></returns>
        </member>
        <member name="T:HTB.DevFx.Cache.CacheItem">
            <summary>
            缓存项的包装类
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheItem.#ctor(System.String,System.Object,HTB.DevFx.Cache.ICacheDependency)">
            <summary>
            构造函数
            </summary>
            <param name="key">缓存项健值</param>
            <param name="value">储存项值</param>
            <param name="cacheDependency">过期策略</param>
        </member>
        <member name="P:HTB.DevFx.Cache.CacheItem.CacheDependency">
            <summary>
            获取过期策略
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.CacheItem.Key">
            <summary>
            获取健值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.CacheItem.Value">
            <summary>
            获取缓存项
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.CacheItem.Hits">
            <summary>
            命中次数
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.CacheItem.LastAccessTime">
            <summary>
            最后命中时间
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.CacheManager">
            <summary>
            缓存管理器实现类，建议应用系统实现此接口的类都从本类继承
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.ICacheManager">
            <summary>
            缓存管理器接口
            </summary>
            <remarks>
            缓存管理器的配置：
            	<code>
            		&lt;configuration&gt;
            			......
            			
            			&lt;cache type="缓存管理器类型"&gt;
            				&lt;caches&gt;&lt;!--这里配置缓存空间（多实例模式）--&gt;
            					......
            				&lt;/caches&gt;
            			&lt;/cache&gt;
            			
            			......
            		&lt;/configuration&gt;
            	</code>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheManager.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化，由框架调用
            </summary>
            <param name="setting">缓存管理器的配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheManager.GetCache(System.String)">
            <summary>
            获取缓存空间
            </summary>
            <param name="cacheName">在配置文件上配置的缓存空间名</param>
            <returns>实现ICache接口的缓存器实例</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheManager.GetCache(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            以一定的配置节来实例化缓存器
            </summary>
            <param name="cacheSetting">缓存器配置节</param>
            <returns>实现ICache接口的缓存器实例</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheManager.#ctor(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            构造函数
            </summary>
            <param name="configSetting">配置节</param>
        </member>
        <member name="F:HTB.DevFx.Cache.CacheManager.setting">
            <summary>
            配置节
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheManager.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化，由框架调用
            </summary>
            <param name="setting">缓存管理器的配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheManager.GetCache(System.String)">
            <summary>
            获取缓存空间
            </summary>
            <param name="cacheName">在配置文件上配置的缓存空间名</param>
            <returns>实现ICache接口的缓存器实例</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.CacheManager.GetCache(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            以一定的配置节来实例化缓存器
            </summary>
            <param name="cacheSetting">缓存器配置节</param>
            <returns>实现ICache接口的缓存器实例</returns>
        </member>
        <member name="T:HTB.DevFx.Cache.Config.SectionHandler">
            <summary>
            缓存的配置节信息
            </summary>
            <remarks>
            配置文件格式和说明：
            	<code>
            		&lt;configSections&gt;
            			&lt;sectionGroup name="htb.devfx" type="HTB.DevFx.Config.GroupHandler, HTB.DevFx.BaseFx"&gt;
            				&lt;section name="cache" type="HTB.DevFx.Cache.Config.SectionHandler, HTB.DevFx.BaseFx" /&gt;
            				......
            			&lt;/sectionGroup&gt;
            		&lt;/configSections&gt;
            
            		......
            
            		&lt;htb.devfx&gt;
            			&lt;cache&gt;
            				......
            			&lt;/cache&gt;
            		&lt;/htb.devfx&gt;
            		......
            	</code>
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Config.SectionBaseHandler">
            <summary>
            配置节基础处理类，继承自 <see cref="T:System.Configuration.ConfigurationSection"/>
            </summary>
            <remarks>
            注意与 <see cref="T:HTB.DevFx.Config.BaseConfigurationElement"/> 的区别
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.SectionBaseHandler.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            获取一个值，该值指示反序列化过程中是否遇到未知属性
            </summary>
            <param name="name">无法识别的属性的名称</param>
            <param name="value">无法识别的属性的值</param>
            <returns>如果反序列化过程中遇到未知属性，则为<c>true</c></returns>
        </member>
        <member name="M:HTB.DevFx.Config.SectionBaseHandler.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            获取一个值，该值指示反序列化过程中是否遇到未知元素
            </summary>
            <param name="elementName">未知的子元素的名称</param>
            <param name="reader">用于反序列化的 <seealso cref="T:System.Xml.XmlReader"/> 对象</param>
            <returns>如果反序列化过程中遇到未知元素，则为 true</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SectionBaseHandler.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            读取配置文件中的 XML
            </summary>
            <param name="reader">在配置文件中进行读取操作的 <seealso cref="T:System.Xml.XmlReader"/></param>
            <param name="serializeCollectionKey">为 <c>true</c>，则只序列化集合的键属性；否则为 <c>false</c></param>
        </member>
        <member name="P:HTB.DevFx.Config.SectionBaseHandler.OnDeserializeUnrecognizedFlag">
            <summary>
            是否遇到未知的属性或元素
            </summary>
            <remarks>
            	<para>派生类如果要允许未定义的属性，则必须重写本属性</para>
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Config.SectionBaseHandler.OuterXml">
            <summary>
            本配置节对应的Xml
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.Config.SectionHandler.OnDeserializeUnrecognizedFlag">
            <summary>
            设置为允许未知的元素存在
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.ExpirationCacheDependency">
            <summary>
            时间过期的过期策略（包括相对时间过期、绝对时间过期）
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.ICacheDependency">
            <summary>
            缓存过期策略接口
            </summary>
            <example>
            下面的示例演示了以相对时间过期策略来缓存对象：
            	<code>
            		......
            		string key = Guid.NewGuid().ToString();
            		object cachingObject = new YourCachingObject();
            		ICache cache = CacheHelper.GetCache("your cache instance name");
            		cache.Add(key, cachingObject, new ExpirationCacheDependency(TimeSpan.FromSeconds(20)));
            		......
            	</code>
            </example>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheDependency.Reset">
            <summary>
            重置缓存策略（相当于重新开始缓存）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.ICacheDependency.IsExpired">
            <summary>
            是否已过期
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.ExpirationCacheDependency.#ctor(System.DateTime)">
            <summary>
            构造函数（绝对时间过期方式）
            </summary>
            <param name="absoluteExperation">绝对过期时间</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ExpirationCacheDependency.#ctor(System.TimeSpan)">
            <summary>
            构造函数（相对时间过期方式）
            </summary>
            <param name="slidingExperation">相对过期时间</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ExpirationCacheDependency.Reset">
            <summary>
            重置缓存策略（相当于重新开始缓存），针对于相对时间过期策略有效
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.ExpirationCacheDependency.IsExpired">
            <summary>
            是否已过期
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.FileCacheDependency">
            <summary>
            文件依赖方式的过期策略
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.FileCacheDependency.#ctor(System.String,System.IO.NotifyFilters)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">需要监视的文件名（包含路径）</param>
            <param name="filters">监视方式</param>
        </member>
        <member name="M:HTB.DevFx.Cache.FileCacheDependency.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">需要监视的文件名（包含路径）</param>
            <remarks>
            监视方式默认为文件的最后写入（修改）时间
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.FileCacheDependency.Reset">
            <summary>
            重置缓存策略（相当于重新开始缓存）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.FileCacheDependency.IsExpired">
            <summary>
            是否已过期
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.ICacheStorage">
            <summary>
            缓存器的存储接口
            </summary>
            <remarks>
            缓存器存储接口的配置：
            	<code>
            		&lt;configuration&gt;
            			......
            			
            			&lt;cache type="HTB.DevFx.Cache.CacheManager"&gt;
            				&lt;caches&gt;
            					......
            					&lt;cache name="缓存器名称" type="缓存器类型" interval="检查过期的时间间隔，0或小于0表示不进行检查"&gt;
            						&lt;!--这里配置缓存存储器--&gt;
            						&lt;cacheStorage type="实现缓存存储器接口的类型" /&gt;
            					&lt;/cache&gt;
            					......
            				&lt;/caches&gt;
            			&lt;/cache&gt;
            			
            			......
            		&lt;/configuration&gt;
            	</code>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Add(System.String,System.Object)">
            <summary>
            添加一项到存储器中
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            如果存在相同的健值，则更新存储的对象
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Get(System.String)">
            <summary>
            获取存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Get(System.Int32)">
            <summary>
            获取存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Set(System.String,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Set(System.Int32,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Remove(System.String)">
            <summary>
            移除存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.RemoveAt(System.Int32)">
            <summary>
            在指定的位置移除存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Contains(System.String)">
            <summary>
            判断存储器中是否包含指定健值的存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.Clear">
            <summary>
            清除此存储器中所有的项
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.GetAllKeys">
            <summary>
            获得此存储器中所有项的健值
            </summary>
            <returns>健值列表（数组）</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.ICacheStorage.GetAllValues">
            <summary>
            获取此存储器中所有项的值
            </summary>
            <returns>存储项列表（数组）</returns>
        </member>
        <member name="P:HTB.DevFx.Cache.ICacheStorage.Item(System.String)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="P:HTB.DevFx.Cache.ICacheStorage.Item(System.Int32)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="P:HTB.DevFx.Cache.ICacheStorage.Count">
            <summary>
            获取此存储器所存储项的个数
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.NullCacheDependency">
            <summary>
            永不过期的缓存策略
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheDependency.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheDependency.Reset">
            <summary>
            重置缓存策略（相当于重新开始缓存）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.NullCacheDependency.IsExpired">
            <summary>
            是否已过期（永远返回<c>false</c>）
            </summary>
        </member>
        <member name="T:HTB.DevFx.Cache.NullCacheStorage">
            <summary>
            内存数据存储方式的存储器
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Add(System.String,System.Object)">
            <summary>
            添加一项到存储器中
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Get(System.String)">
            <summary>
            获取存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Get(System.Int32)">
            <summary>
            获取存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Set(System.String,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Set(System.Int32,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Remove(System.String)">
            <summary>
            移除存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.RemoveAt(System.Int32)">
            <summary>
            在指定的位置移除存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Contains(System.String)">
            <summary>
            判断存储器中是否包含指定健值的存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.Clear">
            <summary>
            清除此存储器中所有的项
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.GetAllKeys">
            <summary>
            获得此存储器中所有项的健值
            </summary>
            <returns>健值列表（数组）</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.NullCacheStorage.GetAllValues">
            <summary>
            获取此存储器中所有项的值
            </summary>
            <returns>存储项列表（数组）</returns>
        </member>
        <member name="P:HTB.DevFx.Cache.NullCacheStorage.Item(System.Int32)">
            <summary>
            以索引方式获取设置一项存储值
            </summary>
            <param name="index">存储项的索引</param>
        </member>
        <member name="P:HTB.DevFx.Cache.NullCacheStorage.Item(System.String)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="T:HTB.DevFx.Cache.RemoteCacheStorageProxy">
            <summary>
            远程缓存存储代理类
            </summary>
            <remarks>
            远程缓存存储代理的配置：
            	<code>
            		&lt;configuration&gt;
            			......
            			
            			&lt;cache type="HTB.DevFx.Cache.CacheManager"&gt;
            				&lt;caches&gt;
            					......
            					&lt;cache name="缓存器名称" type="缓存器类型" interval="检查过期的时间间隔，0或小于0表示不进行检查"&gt;
            						&lt;!--这里配置缓存存储器--&gt;
            						&lt;cacheStorage type="HTB.DevFx.Cache.RemoteCacheStorageProxy" url="远端对象的配置，例如：tcp://localhost:8085/RemoteCacheStorage" /&gt;
            					&lt;/cache&gt;
            					......
            				&lt;/caches&gt;
            			&lt;/cache&gt;
            			
            			......
            		&lt;/configuration&gt;
            	</code>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Add(System.String,System.Object)">
            <summary>
            添加一项到存储器中
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            如果存在相同的健值，则更新存储的对象
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Get(System.String)">
            <summary>
            获取存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Get(System.Int32)">
            <summary>
            获取存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Set(System.String,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Set(System.Int32,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Remove(System.String)">
            <summary>
            移除存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.RemoveAt(System.Int32)">
            <summary>
            在指定的位置移除存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Contains(System.String)">
            <summary>
            判断存储器中是否包含指定健值的存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.Clear">
            <summary>
            清除此存储器中所有的项
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.GetAllKeys">
            <summary>
            获得此存储器中所有项的健值
            </summary>
            <returns>健值列表（数组）</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageProxy.GetAllValues">
            <summary>
            获取此存储器中所有项的值
            </summary>
            <returns>存储项列表（数组）</returns>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageProxy.Item(System.String)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageProxy.Item(System.Int32)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageProxy.Count">
            <summary>
            获取此存储器所存储项的个数
            </summary>
            <remarks>
            如果远端对象没有准备好，则返回-1
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Cache.RemoteCacheStorageServer">
            <summary>
            存储器远端（服务器）类
            </summary>
            <remarks>
            配合 <see cref="T:HTB.DevFx.Cache.RemoteCacheStorageProxy"/>，把存储数据存储到远端<br/>
            注意：应该把本类配置为Singleton模式
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Add(System.String,System.Object)">
            <summary>
            添加一项到存储器中
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            如果存在相同的健值，则更新存储的对象
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Get(System.String)">
            <summary>
            获取存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Get(System.Int32)">
            <summary>
            获取存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <returns>存储的对象，如果存储中没有命中，则返回<c>null</c></returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Set(System.String,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="key">存储项的健值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Set(System.Int32,System.Object)">
            <summary>
            设置存储项
            </summary>
            <param name="index">存储项的索引值</param>
            <param name="value">存储的对象</param>
            <remarks>
            仅针对存在存储项，若不存在，则不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Remove(System.String)">
            <summary>
            移除存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.RemoveAt(System.Int32)">
            <summary>
            在指定的位置移除存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Contains(System.String)">
            <summary>
            判断存储器中是否包含指定健值的存储项
            </summary>
            <param name="key">存储项的健值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Clear">
            <summary>
            清除此存储器中所有的项
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.GetAllKeys">
            <summary>
            获得此存储器中所有项的健值
            </summary>
            <returns>健值列表（数组）</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.GetAllValues">
            <summary>
            获取此存储器中所有项的值
            </summary>
            <returns>存储项列表（数组）</returns>
        </member>
        <member name="M:HTB.DevFx.Cache.RemoteCacheStorageServer.Init(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            初始化
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageServer.Instances">
            <summary>
            获取本类的实例列表
            </summary>
            <remarks>
            利用此属性，可以把客户端轮询过期时间设置为-1，然后在服务器端进行轮询，以提高效率
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageServer.Count">
            <summary>
            获取此存储器所存储项的个数
            </summary>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageServer.Item(System.String)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="key">存储项的健值</param>
        </member>
        <member name="P:HTB.DevFx.Cache.RemoteCacheStorageServer.Item(System.Int32)">
            <summary>
            获取设置一个存储项
            </summary>
            <param name="index">存储项的索引值</param>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigSettingCollection">
            <summary>
            配置节集合
            </summary>
        </member>
        <member name="T:HTB.DevFx.Utils.CollectionBase`1">
            <summary>
            集合基础类（泛型）
            </summary>
            <typeparam name="T">集合收集对象的类型</typeparam>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="uniqueKey">键是否限制为唯一</param>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.Add(System.String,`0)">
            <summary>
            添加一项到集合中
            </summary>
            <param name="key">键值</param>
            <param name="value">项</param>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.Set(System.String,`0)">
            <summary>
            添加/替换一项到集合中
            </summary>
            <param name="key">键值</param>
            <param name="value">项</param>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.Contains(System.String)">
            <summary>
            集合中是否包含某项
            </summary>
            <param name="key">键值</param>
            <returns>是/否</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.Remove(System.String)">
            <summary>
            移除某项
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            在指定处移除某项
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.Clear">
            <summary>
            清空集合中所有元素
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.CopyToArray">
            <summary>
            复制到数组中
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.CollectionBase`1.GetItem(System.String)">
            <summary>
            获取具有相同Key的项
            </summary>
            <param name="key">键值</param>
            <returns>具有相同Key的项</returns>
        </member>
        <member name="P:HTB.DevFx.Utils.CollectionBase`1.UniqueKey">
            <summary>
            键是否限制为唯一
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.CollectionBase`1.Item(System.Int32)">
            <summary>
            按索引的方式获取项
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:HTB.DevFx.Utils.CollectionBase`1.Item(System.String)">
            <summary>
            按键值方式获取项
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="P:HTB.DevFx.Utils.CollectionBase`1.Values">
            <summary>
            获取所有值
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSettingCollection.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="uniqueKey">键值是否唯一</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSettingCollection.Add(HTB.DevFx.Config.ConfigSetting)">
            <summary>
            添加配置节
            </summary>
            <param name="setting">配置节</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSettingCollection.Set(HTB.DevFx.Config.ConfigSetting)">
            <summary>
            添加/替换配置节（如果存在则替换）
            </summary>
            <param name="setting">配置节</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSettingCollection.Clone">
            <summary>
            深度复制集合
            </summary>
            <returns>复制后的集合</returns>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigSettingOperator">
            <summary>
            配置节命令
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Add">
            <summary>
            添加配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Remove">
            <summary>
            移除配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Move">
            <summary>
            移动配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Clear">
            <summary>
            清除所有配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Update">
            <summary>
            更新（合并）配置节（如果不存在，则忽略此命令）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSettingOperator.Set">
            <summary>
            设置配置节，如果存在则合并，否则添加
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.BaseConfigurationElement">
            <summary>
            配置元素基础类，从<see cref="T:System.Configuration.ConfigurationElement"/>派生
            </summary>
            <remarks>
            	<para>此类对基类<see cref="T:System.Configuration.ConfigurationElement"/>做了些修改，允许未定义的属性存在</para>
            	<para>派生类如果要允许未定义的属性，则必须重写<see cref="P:HTB.DevFx.Config.BaseConfigurationElement.OnDeserializeUnrecognizedFlag"/></para>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            获取一个值，该值指示反序列化过程中是否遇到未知属性
            </summary>
            <param name="name">无法识别的属性的名称</param>
            <param name="value">无法识别的属性的值</param>
            <returns>如果反序列化过程中遇到未知属性，则为<c>true</c></returns>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            获取一个值，该值指示反序列化过程中是否遇到未知元素
            </summary>
            <param name="elementName">未知的子元素的名称</param>
            <param name="reader">用于反序列化的 <seealso cref="T:System.Xml.XmlReader"/> 对象</param>
            <returns>如果反序列化过程中遇到未知元素，则为 true</returns>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            读取配置文件中的 XML
            </summary>
            <param name="reader">在配置文件中进行读取操作的 <seealso cref="T:System.Xml.XmlReader"/></param>
            <param name="serializeCollectionKey">为 <c>true</c>，则只序列化集合的键属性；否则为 <c>false</c></param>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.GetPropertyValue(System.String)">
            <summary>
            获取未定义的属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.GetPropertyValue``1(System.String)">
            <summary>
            获取未定义的属性值
            </summary>
            <typeparam name="T">属性值类型</typeparam>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.GetPropertyValue``1(System.String,``0)">
            <summary>
            获取未定义的属性值
            </summary>
            <typeparam name="T">属性值类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="defaultValue">如果此属性不存在需提供的缺省值</param>
            <returns>属性值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElement.CheckPropertyExists(System.String)">
            <summary>
            检测指定的属性是否存在
            </summary>
            <param name="propertyName">属性名</param>
            <returns>是否存在</returns>
        </member>
        <member name="P:HTB.DevFx.Config.BaseConfigurationElement.OnDeserializeUnrecognizedFlag">
            <summary>
            是否遇到未知的属性或元素
            </summary>
            <remarks>
            	<para>派生类如果要允许未定义的属性，则必须重写本属性</para>
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Config.BaseConfigurationElement.OuterXml">
            <summary>
            本元素对应的Xml
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.BaseConfigurationElementCollection">
            <summary>
            基础的配置元素集合（抽象），继承自 <seealso cref="T:System.Configuration.ConfigurationElementCollection"/>
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.BaseConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获得元素的键
            </summary>
            <param name="element">配置元素</param>
            <returns>键</returns>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigException">
            <summary>
            配置异常
            </summary>
            <remarks>
            在配置里面，能发现的异常都会包装成此类的实例
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigException.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigHelper">
            <summary>
            关于配置的一些实用方法
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigHelper.ConfigFileDefaultSearchPath">
            <summary>
            缺省的XML配置文件查找目录列表
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.SearchConfigFile(System.String,System.String[])">
            <summary>
            验证配置文件路径并返回
            </summary>
            <param name="fileName">配置文件名</param>
            <param name="searchPath">搜索目录列表</param>
            <returns>返回配置文件路径</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.SearchConfigFileWithPattern(System.String,System.String[])">
            <summary>
            查找由通配符指定的文件集合
            </summary>
            <param name="filePattern">文件通配符</param>
            <param name="searchPath">搜索目录列表</param>
            <returns>找到的文件列表</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.CreateFromXmlString(System.String)">
            <summary>
            从Xml字符串中生成 <see cref="T:HTB.DevFx.Config.IConfigSetting"/>
            </summary>
            <param name="xmlString">Xml字符串</param>
            <returns><see cref="T:HTB.DevFx.Config.IConfigSetting"/></returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.CreateFromXmlFile(System.String)">
            <summary>
            从Xml文件中生成 <see cref="T:HTB.DevFx.Config.IConfigSetting"/>
            </summary>
            <param name="xmlFileName">Xml文件</param>
            <returns><see cref="T:HTB.DevFx.Config.IConfigSetting"/></returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.CreateFromXmlNode(System.Xml.XmlNode)">
            <summary>
            从 <see cref="T:System.Xml.XmlNode"/> 生成 <see cref="T:HTB.DevFx.Config.IConfigSetting"/>
            </summary>
            <param name="xmlNode"><see cref="T:System.Xml.XmlNode"/></param>
            <returns><see cref="T:HTB.DevFx.Config.IConfigSetting"/></returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.CreateFromXmlSource(System.String,System.Type)">
            <summary>
            从资源（Uri）中生成 <see cref="T:HTB.DevFx.Config.IConfigSetting"/>
            </summary>
            <param name="xmlSource">Uri字符串</param>
            <param name="sourceInType">如果是内嵌资源所在的程序集</param>
            <returns><see cref="T:HTB.DevFx.Config.IConfigSetting"/></returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.LoadXmlNodeFromFile(System.String,System.String,System.Boolean)">
            <summary>
            获取XML文件的内容
            </summary>
            <param name="fileName">XML文件名</param>
            <param name="sectionName">对应的XPath</param>
            <param name="rawType">是否不进行任何转换而返回</param>
            <returns>XmlNode</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.LoadXmlNodeFromString(System.String,System.String)">
            <summary>
            分析XML字符串内容
            </summary>
            <param name="xmlString">XML字符串</param>
            <param name="sectionName">对应的XPath</param>
            <returns>XmlNode</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigHelper.LoadXmlFile(System.Xml.XmlDocument,System.String)">
            <summary>
            载入XML文件内容
            </summary>
            <param name="doc">XmlDocument</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigSetting">
            <summary>
            配置节实现
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.IConfigSetting">
            <summary>
            配置节接口
            </summary>
            <remarks>
            形如下面的XML节表示一个配置节：
            	<code>
            		&lt;app my="myProperty"&gt;myValue&lt;/app&gt;
            	</code>
            此时，<c>Name="app"</c>，Value的值为"myValue"，Property的值为"myProperty"
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.GetChildSettings">
            <summary>
            获取所有子配置节
            </summary>
            <returns>配置节数组</returns>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.GetChildSetting(System.String)">
            <summary>
            按XPath方式获取配置节
            </summary>
            <param name="xpath">XPath</param>
            <returns>配置节</returns>
            <remarks>
            XPath为类似XML的XPath，形如<c>framework/modules"</c><br />
            如果有相同的配置节，则返回第一个配置节
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.GetChildSetting(System.String[])">
            <summary>
            按多级方式获取配置节
            </summary>
            <param name="settingName">多级的配置节名</param>
            <returns>配置节</returns>
            <remarks>
            多级的配置节名，形如有如下配置：
            	<code>
            		&lt;app1&gt;
            			&lt;app2&gt;
            				&lt;app3&gt;&lt;/app3&gt;
            			&lt;/app2&gt;
            		&lt;/app1&gt;
            	</code>
            则按顺序传入，比如<c>GetChildSetting("app1", "app2", "app3")</c>，此时返回名为<c>app3</c>的配置节
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.GetRootSetting">
            <summary>
            获取根配置节
            </summary>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.Merge(HTB.DevFx.Config.IConfigSetting)">
            <summary>
            合并配置节
            </summary>
            <param name="setting">被合并的配置节</param>
        </member>
        <member name="M:HTB.DevFx.Config.IConfigSetting.Clone(System.Boolean,System.Boolean)">
            <summary>
            克隆此配置节
            </summary>
            <param name="readonly">是否只读</param>
            <param name="deep">是否深层次的克隆</param>
            <returns>配置节</returns>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.ReadOnly">
            <summary>
            当前配置节是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Name">
            <summary>
            此配置节的名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.SettingName">
            <summary>
            此配置节实际名称
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Value">
            <summary>
            此配置节的名/值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Parent">
            <summary>
            包含此配置节的父配置节
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Children">
            <summary>
            此配置节包含的子配置节数目
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Property">
            <summary>
            配置节属性
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Item(System.String)">
            <summary>
            获取子配置节
            </summary>
            <param name="childSettingName">子配置节名</param>
            <remarks>
            如果不存在，将返回<c>null</c>
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Config.IConfigSetting.Item(System.Int32)">
            <summary>
            获取子配置节
            </summary>
            <param name="childSettingIndex">子配置节顺序</param>
            <remarks>
            如果不存在，将返回null
            </remarks>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.ConfigFilePropertyName">
            <summary>
            配置节另附的文件属性名
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.ConfigNodePropertyName">
            <summary>
            配置节在另附文件的节点名
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.ConfigNamePropertyName">
            <summary>
            配置节实际名称的属性名
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.#ctor">
            <summary>
            保护构造方法
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.readonly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.settingName">
            <summary>
            此配置节实际名称
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.value">
            <summary>
            配置值
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.parent">
            <summary>
            父配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.property">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.childSettings">
            <summary>
            子配置节
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.ConfigSetting.operatorSettings">
            <summary>
            配置节命令集合
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.CreateConfigSetting">
            <summary>
            创建配置节实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.CreateSettingProperty(System.Boolean)">
            <summary>
            创建配置属性实例
            </summary>
            <param name="readonly">是否只读</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            转换成字符串
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/></param>
            <param name="layerIndex">所处层次</param>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.CreateConfigSetting(HTB.DevFx.Config.ConfigSetting,System.Boolean)">
            <summary>
            创建配置节实例
            </summary>
            <param name="setting">被复制的配置节</param>
            <param name="deep">是否深度复制</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.GetChildSettings">
            <summary>
            获取所有子配置节
            </summary>
            <returns>配置节数组</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.GetChildSetting(System.String)">
            <summary>
            按XPath方式获取配置节
            </summary>
            <param name="xpath">XPath</param>
            <returns>配置节</returns>
            <remarks>
            XPath为类似XML的XPath，形如<c>framework/modules/module"</c><br />
            如果有相同的配置节，则返回第一个配置节
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.GetChildSetting(System.String[])">
            <summary>
            按多级方式获取配置节
            </summary>
            <param name="settingName">多级的配置节名</param>
            <returns>配置节</returns>
            <remarks>
            多级的配置节名，形如有如下配置：
            	<code>
            		&lt;app1&gt;
            			&lt;app2&gt;
            				&lt;app3&gt;&lt;/app3&gt;
            			&lt;/app2&gt;
            		&lt;/app1&gt;
            	</code>
            则按顺序传入，比如<c>GetChildSetting("app1", "app2", "app3")</c>，此时返回名为<c>app3</c>的配置节<br />
            "."表示当前配置节，".."表示上级配置节
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.Clone(System.Boolean,System.Boolean)">
            <summary>
            克隆此配置节
            </summary>
            <param name="readonly">是否只读</param>
            <param name="deep">是否深层次的克隆</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.Clone">
            <summary>
            克隆此配置节
            </summary>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.Merge(HTB.DevFx.Config.ConfigSetting)">
            <summary>
            合并配置节
            </summary>
            <param name="setting">需被合并的配置节</param>
            <returns>合并后的配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.Compile(HTB.DevFx.Config.ConfigSetting,HTB.DevFx.Config.ConfigSettingCollection)">
            <summary>
            编译本配置节，将执行一些配置命令，具有配置命令的配置节需执行本方法后才可以使用
            </summary>
            <param name="current">当前配置节</param>
            <param name="settings">配置命令集合</param>
            <returns>编译后的配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.GetRootSetting">
            <summary>
            获取根配置节
            </summary>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigSetting.ToString">
            <summary>
            转换成字符串格式
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.ReadOnly">
            <summary>
            当前配置节是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Name">
            <summary>
            此配置节的名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.SettingName">
            <summary>
            此配置节实际名称
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Value">
            <summary>
            此配置节的名/值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Parent">
            <summary>
            包含此配置节的父配置节
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Children">
            <summary>
            此配置节包含的子配置节数目
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Property">
            <summary>
            配置节属性
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.ConfigFile">
            <summary>
            获取此配置节的另附文件
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.ConfigNode">
            <summary>
            获取此配置节另附文件中的节点
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.SettingOperator">
            <summary>
            此节是否为配置节命令
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Item(System.String)">
            <summary>
            获取/设置子配置节
            </summary>
            <param name="childSettingName">子配置节名</param>
            <remarks>
            如果不存在，将返回<c>null</c><br />
            如果设置时存在相同的节，则替换
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigSetting.Item(System.Int32)">
            <summary>
            获取子配置节
            </summary>
            <param name="childSettingIndex">子配置节顺序</param>
            <remarks>
            如果不存在，将返回null
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Config.GroupHandler">
            <summary>
            配置组
            </summary>
            <remarks>
            	<code>
            		&lt;configSections&gt;
            			&lt;sectionGroup name="htb.devfx" type="HTB.DevFx.Config.GroupHandler, HTB.DevFx.BaseFx"&gt;
            				&lt;section name="mail" type="HTB.DevFx.Utils.Mail.Config.SectionHandler, HTB.DevFx.BaseFx" /&gt;
            				......
            			&lt;/sectionGroup&gt;
            		&lt;/configSections&gt;
            
            		......
            
            		&lt;htb.devfx&gt;
            			&lt;mail&gt;
            				&lt;smtpSetting server="" port="" userName="" password="" /&gt;
            			&lt;/mail&gt;
            		&lt;/htb.devfx&gt;
            		......
            </code>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.GroupHandler.GetSection``1">
            <summary>
            获取配置节（泛型）
            </summary>
            <typeparam name="T">配置节类型</typeparam>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.GroupHandler.GetSection``1(System.Boolean)">
            <summary>
            获取配置节（泛型）
            </summary>
            <typeparam name="T">配置节类型</typeparam>
            <param name="throwOnError">如果配置组未配置是否抛出异常</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.GroupHandler.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.GroupHandler.Instance">
            <summary>
            当前配置组的实例（单件）
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.ISettingProperty">
            <summary>
            配置节属性接口
            </summary>
            <remarks>
            形如下面的XML节表示一个配置节：
            	<code>
            		&lt;app my="myProperty"&gt;myValue&lt;/app&gt;
            	</code>
            此时，<c>Name="app"</c>，Value的值为"myValue"，Property的值为"myProperty"
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Config.ISettingProperty.TryGetPropertyValue(System.String)">
            <summary>
            尝试获取某属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ISettingProperty.TryGetPropertyValue``1(System.String)">
            <summary>
            尝试获取某属性值并转换成指定类型
            </summary>
            <typeparam name="T">转换成指定的类型</typeparam>
            <param name="propertyName">属性名</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ISettingProperty.TryGetPropertyValue``1(System.String,``0)">
            <summary>
            尝试获取某属性值并转换成指定类型
            </summary>
            <typeparam name="T">转换成指定的类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="defaultValue">缺省值</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ISettingProperty.Clone(System.Boolean,System.Boolean)">
            <summary>
            克隆属性
            </summary>
            <param name="readonly">是否只读</param>
            <param name="deep">是否深度复制</param>
            <returns>ISettingProperty</returns>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingProperty.ReadOnly">
            <summary>
            当前配置节属性是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingProperty.Count">
            <summary>
            配置节的属性个数
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingProperty.Item(System.String)">
            <summary>
            获取属性值(根据属性名)
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingProperty.Item(System.Int32)">
            <summary>
            获取属性值(根据属性索引)
            </summary>
            <param name="propertyIndex">属性索引</param>
        </member>
        <member name="T:HTB.DevFx.Config.ISettingValue">
            <summary>
            配置值接口
            </summary>
            <remarks>
            形如下面的XML节表示一个配置节：
            	<code>
            		&lt;app my="myProperty"&gt;myValue&lt;/app&gt;
            	</code>
            此时，<c>Name="app"</c>，Value的值为"myValue"，Property的值为"myProperty"
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Utils.IConverting">
            <summary>
            值转换成特定类型的接口
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToString">
            <summary>
            值转换成String类型
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToByte">
            <summary>
            值转换成Byte类型
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToChar">
            <summary>
            值转换成Char类型
            </summary>
            <returns>Char</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToDateTime">
            <summary>
            值转换成DateTime类型
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToInt16">
            <summary>
            值转换成Int16类型（C#为short）
            </summary>
            <returns>Int16</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToInt32">
            <summary>
            值转换成Int32类型（C#为int）
            </summary>
            <returns>Int32</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToInt64">
            <summary>
            值转换成Int64类型（C#为long）
            </summary>
            <returns></returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToSByte">
            <summary>
            值转换成SByte类型
            </summary>
            <returns>SByte</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToDouble">
            <summary>
            值转换成Double类型
            </summary>
            <returns>Double</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToDecimal">
            <summary>
            值转换成Decimal类型
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToSingle">
            <summary>
            值转换成Single类型（C#为float）
            </summary>
            <returns>Single</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToUInt16">
            <summary>
            值转换成Single类型（C#为ushort）
            </summary>
            <returns>UInt16</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToUInt32">
            <summary>
            值转换成UInt32类型（C#为uint）
            </summary>
            <returns>UInt32</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToUInt64">
            <summary>
            值转换成UInt64类型（C#为ulong）
            </summary>
            <returns>UInt64</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToBoolean">
            <summary>
            值转换成Boolean类型（C#为bool）
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToType">
            <summary>
            如果保存的是Type信息，则转换成Type
            </summary>
            <returns>Type</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToType(System.Boolean)">
            <summary>
            如果保存的是Type信息，则转换成Type
            </summary>
            <param name="throwError">是否抛出异常</param>
            <returns>Type</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject">
            <summary>
            根据值创建对象
            </summary>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject(System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="parameters">构造函数的参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject(System.Type,System.Boolean,System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="expectedType">期望的类型</param>
            <param name="throwError">是否抛出异常</param>
            <param name="parameters">构造函数的参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject(System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="expectedType">期望的类型</param>
            <param name="throwError">是否抛出异常</param>
            <param name="paramTypes">构造函数的参数类型列表</param>
            <param name="paramValues">构造函数的参数列表</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject``1">
            <summary>
            转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject``1(System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="parameters">可变参数列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject``1(System.Boolean,System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="throwError">如果失败，是否抛出异常</param>
            <param name="parameters">可变参数列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.ToObject``1(System.Boolean,System.Type[],System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="throwError">如果失败，是否抛出异常</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="paramValues">参数值列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.TryToObject``1">
            <summary>
            尝试转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.IConverting.TryToObject``1(``0)">
            <summary>
            尝试转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="defaultValue">如果转换失败返回的缺省值</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ISettingValue.Clone(System.Boolean)">
            <summary>
             克隆配置值
            </summary>
            <param name="readonly">是否只读</param>
            <returns>ISettingValue</returns>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingValue.ReadOnly">
            <summary>
            当前配置值是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingValue.Name">
            <summary>
            配置值名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.ISettingValue.Value">
            <summary>
            配置值
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.SettingProperty">
            <summary>
             配置节属性的实现
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.#ctor(HTB.DevFx.Config.SettingValueCollection,System.Boolean)">
            <summary>
            保护构造方法
            </summary>
            <param name="properties">属性集合</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="F:HTB.DevFx.Config.SettingProperty.readonly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.SettingProperty.properties">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.CreateSettingProperty(HTB.DevFx.Config.SettingValueCollection,System.Boolean)">
            <summary>
            创建配置属性实例
            </summary>
            <param name="properties">属性集合</param>
            <param name="readonly">是否只读</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.CreateSettingProperty(System.Boolean)">
            <summary>
            创建配置属性实例
            </summary>
            <param name="readonly">是否只读</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.TryGetPropertyValue(System.String)">
            <summary>
            尝试获取某属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.TryGetPropertyValue``1(System.String)">
            <summary>
            尝试获取某属性值并转换成指定类型
            </summary>
            <typeparam name="T">转换成指定的类型</typeparam>
            <param name="propertyName">属性名</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.TryGetPropertyValue``1(System.String,``0)">
            <summary>
            尝试获取某属性值并转换成指定类型
            </summary>
            <typeparam name="T">转换成指定的类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="defaultValue">缺省值</param>
            <returns>指定类型的实例</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingProperty.Clone(System.Boolean,System.Boolean)">
            <summary>
            克隆配置属性
            </summary>
            <param name="readonly">是否只读</param>
            <param name="deep">是否深度复制</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="P:HTB.DevFx.Config.SettingProperty.ReadOnly">
            <summary>
            当前配置节属性是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.SettingProperty.Count">
            <summary>
            配置节的属性个数
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.SettingProperty.Item(System.String)">
            <summary>
            获取/设置属性值(根据属性名)
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="P:HTB.DevFx.Config.SettingProperty.Item(System.Int32)">
            <summary>
            获取属性值(根据属性索引)
            </summary>
            <param name="propertyIndex">属性索引</param>
        </member>
        <member name="T:HTB.DevFx.Config.SettingValue">
            <summary>
            配置值的实现，提供一些缺省的实现
            </summary>
        </member>
        <member name="T:HTB.DevFx.Utils.Converting">
            <summary>
            转换抽象类
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToString">
            <summary>
            值转换成String类型
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToByte">
            <summary>
            值转换成Byte类型
            </summary>
            <returns>Byte</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToChar">
            <summary>
            值转换成Char类型
            </summary>
            <returns>Char</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToDateTime">
            <summary>
            值转换成DateTime类型
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToInt16">
            <summary>
            值转换成Int16类型（C#为short）
            </summary>
            <returns>Int16</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToInt32">
            <summary>
            值转换成Int32类型
            </summary>
            <returns>Int32</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToInt64">
            <summary>
            值转换成Int64类型（C#为long）
            </summary>
            <returns></returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToSByte">
            <summary>
            值转换成SByte类型
            </summary>
            <returns>SByte</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToDouble">
            <summary>
            值转换成Double类型
            </summary>
            <returns>Double</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToDecimal">
            <summary>
            值转换成Decimal类型
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToSingle">
            <summary>
            值转换成Single类型（C#为float）
            </summary>
            <returns>Single</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToUInt16">
            <summary>
            值转换成Single类型（C#为ushort）
            </summary>
            <returns>UInt16</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToUInt32">
            <summary>
            值转换成UInt32类型（C#为uint）
            </summary>
            <returns>UInt32</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToUInt64">
            <summary>
            值转换成UInt64类型（C#为ulong）
            </summary>
            <returns>UInt64</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToBoolean">
            <summary>
            值转换成Boolean类型
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToType">
            <summary>
            如果保存的是Type信息，则转换成Type
            </summary>
            <returns>Type</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToType(System.Boolean)">
            <summary>
            如果保存的是Type信息，则转换成Type
            </summary>
            <param name="throwError">是否抛出异常</param>
            <returns>Type</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject">
            <summary>
            根据值创建对象
            </summary>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject(System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="parameters">构造函数的参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject(System.Type,System.Boolean,System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="expectedType">期望的类型</param>
            <param name="throwError">是否抛出异常</param>
            <param name="parameters">构造函数的参数</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject(System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>
            根据值创建对象
            </summary>
            <param name="expectedType">期望的类型</param>
            <param name="throwError">是否抛出异常</param>
            <param name="paramTypes">构造函数的参数类型列表</param>
            <param name="paramValues">构造函数的参数列表</param>
            <returns>对象</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject``1">
            <summary>
            转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject``1(System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="parameters">可变参数列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject``1(System.Boolean,System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="throwError">如果失败，是否抛出异常</param>
            <param name="parameters">可变参数列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#ToObject``1(System.Boolean,System.Type[],System.Object[])">
            <summary>
            转换成指定类型（带参数）
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="throwError">如果失败，是否抛出异常</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="paramValues">参数值列表</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#TryToObject``1">
            <summary>
            尝试转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.HTB#DevFx#Utils#IConverting#TryToObject``1(``0)">
            <summary>
            尝试转换成指定类型
            </summary>
            <typeparam name="T">转换成的类型</typeparam>
            <param name="defaultValue">如果转换失败返回的缺省值</param>
            <returns>转换后的类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Converting.StringToEnum``1(System.String)">
            <summary>
            字符串转换成枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumString">字符串</param>
            <returns>枚举值</returns>
        </member>
        <member name="P:HTB.DevFx.Utils.Converting.ConvertingValue">
            <summary>
            被转换的值
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValue.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            保护构造方法
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="F:HTB.DevFx.Config.SettingValue.name">
            <summary>
            配置值名
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.SettingValue.value">
            <summary>
            配置值
            </summary>
        </member>
        <member name="F:HTB.DevFx.Config.SettingValue.readonly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValue.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值实例
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValue.Clone">
            <summary>
            克隆配置值
            </summary>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValue.Clone(System.Boolean)">
            <summary>
            克隆配置值
            </summary>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="P:HTB.DevFx.Config.SettingValue.ConvertingValue">
            <summary>
            被转换的值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.SettingValue.Name">
            <summary>
            配置值名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.SettingValue.Value">
            <summary>
            配置值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Config.SettingValue.ReadOnly">
            <summary>
            当前配置值是否只读
            </summary>
        </member>
        <member name="T:HTB.DevFx.Config.ConfigCollection`1">
            <summary>
            配置集合（泛型）
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigCollection`1.ToArray">
            <summary>
            集合转换成数组
            </summary>
            <returns>元素数组</returns>
        </member>
        <member name="M:HTB.DevFx.Config.ConfigCollection`1.CreateNewElement">
            <summary>
            创建新元素
            </summary>
            <returns>新元素</returns>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigCollection`1.Item(System.Int32)">
            <summary>
            按索引方式获取元素
            </summary>
            <param name="index">索引</param>
            <returns>元素</returns>
        </member>
        <member name="P:HTB.DevFx.Config.ConfigCollection`1.Item(System.Object)">
            <summary>
            按键值方式获取元素
            </summary>
            <param name="key">键值</param>
            <returns>元素</returns>
        </member>
        <member name="T:HTB.DevFx.Config.SettingValueCollection">
            <summary>
            配置值集合
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValueCollection.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValueCollection.Add(HTB.DevFx.Config.SettingValue)">
            <summary>
            添加配置值
            </summary>
            <param name="value">配置值</param>
            <returns>配置值</returns>
        </member>
        <member name="M:HTB.DevFx.Config.SettingValueCollection.Set(HTB.DevFx.Config.SettingValue)">
            <summary>
            添加/替换配置值（如果存在则替换）
            </summary>
            <param name="value">配置值</param>
        </member>
        <member name="T:HTB.DevFx.Config.XmlConfig.XmlConfigSetting">
            <summary>
            XML方式实现配置节 <see cref="T:HTB.DevFx.Config.ConfigSetting"/>
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.CreateConfigSetting">
            <summary>
            创建配置节实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.CreateSettingProperty(System.Boolean)">
            <summary>
            创建配置属性实例
            </summary>
            <param name="readonly">是否只读</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.ToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            转换成字符串
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/></param>
            <param name="layerIndex">所处层次</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.Create(HTB.DevFx.Config.XmlConfig.XmlConfigSetting,System.Xml.XmlNode,System.Boolean,System.String[],System.Collections.Generic.List{System.String})">
            <summary>
            创建配置节
            </summary>
            <param name="parent">父配置节</param>
            <param name="xmlNode">XML节</param>
            <param name="readonly">是否只读</param>
            <param name="searchPath">XML搜索目录列表</param>
            <param name="configFiles">如果有子配置文件，则添加到此列表</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.Create(System.String,System.Boolean,System.String[],System.Collections.Generic.List{System.String})">
            <summary>
            创建配置节
            </summary>
            <param name="fileName">XML文件</param>
            <param name="readonly">是否只读</param>
            <param name="searchPath">XML搜索目录列表</param>
            <param name="configFiles">如果有子配置文件，则添加到此列表</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.Create(System.String,System.Boolean)">
            <summary>
            创建配置节
            </summary>
            <param name="fileName">XML文件</param>
            <param name="readonly">是否只读</param>
            <returns>配置节</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlConfigSetting.Create(System.String)">
            <summary>
            创建配置节
            </summary>
            <param name="fileName">XML文件</param>
            <returns>配置节</returns>
        </member>
        <member name="T:HTB.DevFx.Config.XmlConfig.XmlSettingProperty">
            <summary>
            使用XML实现配置节属性：<see cref="T:HTB.DevFx.Config.SettingProperty"/>
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.#ctor(HTB.DevFx.Config.SettingValueCollection,System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="properties">属性集合</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="readonly">是否只读</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            使用XmlNode初始化
            </summary>
            <param name="xmlNode">XmlNode</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.InitData(System.Xml.XmlNode,System.Boolean)">
            <summary>
            初始化XML结点
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.CreateSettingProperty(HTB.DevFx.Config.SettingValueCollection,System.Boolean)">
            <summary>
            创建配置属性实例
            </summary>
            <param name="properties">属性集合</param>
            <param name="readonly">是否只读</param>
            <returns>SettingProperty</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingProperty.ToString">
            <summary>
            转换成字符串格式
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:HTB.DevFx.Config.XmlConfig.XmlSettingValue">
            <summary>
            使用XML实现<see cref="T:HTB.DevFx.Config.SettingValue"/>
            </summary>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingValue.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            使用name/value的形式初始化
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingValue.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            使用XmlNode初始化
            </summary>
            <param name="xmlNode">XmlNode</param>
            <param name="readonly">是否只读</param>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingValue.CreateSettingValue(System.String,System.String,System.Boolean)">
            <summary>
            创建配置值实例
            </summary>
            <param name="name">配置值名</param>
            <param name="value">配置值</param>
            <param name="readonly">是否只读</param>
            <returns>SettingValue</returns>
        </member>
        <member name="M:HTB.DevFx.Config.XmlConfig.XmlSettingValue.ToString">
            <summary>
            转换成字符串格式
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:HTB.DevFx.Core.AOPResult">
            <summary>
            对象处理返回的结果
            </summary>
        </member>
        <member name="T:HTB.DevFx.Core.IAOPResult">
            <summary>
            对象处理返回的结果接口
            </summary>
            <remarks>
            建议在代码调用返回值中都采用此类实例为返回值<br />
            一般ResultNo小于0表示异常，0表示成功，大于0表示其它一般提示信息
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Core.IAOPResult.ThrowErrorOnFailed">
            <summary>
            如果处理失败，则抛出异常 <see cref="T:HTB.DevFx.ExceptionManagement.BaseException"/>
            </summary>
            <returns>返回本身</returns>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.ResultNo">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.ResultDescription">
            <summary>
            对应的描述信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.ResultAttachObject">
            <summary>
            相应的附加信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.InnerAOPResult">
            <summary>
            内部AOPResult
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.IsSuccess">
            <summary>
            处理结果是否成功（ResultNo == 0）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.IsNotSuccess">
            <summary>
            处理结果是否失败（ResultNo != 0 ）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.IsFailed">
            <summary>
            处理结果是否失败（ResultNo &lt; 0 ）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult.IsPassedButFailed">
            <summary>
            已处理，但有不致命的错误（ResultNo &gt; 0）
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.#ctor(System.Int32,System.String,System.Object,HTB.DevFx.Core.IAOPResult)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
            <param name="resultAttachObject">相应的附加信息</param>
            <param name="innerAOPResult">内部AOPResult</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.#ctor(System.Int32,System.String,HTB.DevFx.Core.IAOPResult)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
            <param name="innerAOPResult">内部AOPResult</param>
        </member>
        <member name="F:HTB.DevFx.Core.AOPResult.resultNo">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.AOPResult.resultDescription">
            <summary>
            对应的描述信息
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.AOPResult.resultAttachObject">
            <summary>
            相应的附加信息
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.AOPResult.innerAOPResult">
            <summary>
            内部AOPResult
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.op_Implicit(HTB.DevFx.Core.AOPResult)~System.Boolean">
            <summary>
            隐式转换成Boolean类型，以期简化判断
            </summary>
            <param name="result">AOPResult</param>
            <returns>true/false</returns>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.Convert``2(HTB.DevFx.Core.IAOPResult{``0})">
            <summary>
            把<c>IAOPResult&lt;Q&gt;</c>转换成<c>IAOPResult&lt;P&gt;</c>，其中<typeparamref name="Q"/>从<typeparamref name="P"/>派生
            </summary>
            <typeparam name="Q">附加的泛型</typeparam>
            <typeparam name="P">附加的泛型</typeparam>
            <param name="result">待转换的<c>IAOPResult&lt;T&gt;</c></param>
            <returns>转换后的<c>IAOPResult&lt;T&gt;</c></returns>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.ConvertTo``2(HTB.DevFx.Core.IAOPResult{``0})">
            <summary>
            把<c>IAOPResult&lt;Q&gt;</c>转换成<c>IAOPResult&lt;P&gt;</c>
            </summary>
            <typeparam name="Q">附加的泛型</typeparam>
            <typeparam name="P">附加的泛型</typeparam>
            <param name="result">待转换的<c>IAOPResult&lt;T&gt;</c></param>
            <returns>转换后的<c>IAOPResult&lt;T&gt;</c></returns>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.ThrowErrorOnFailed">
            <summary>
            如果处理失败，则抛出异常 <see cref="T:HTB.DevFx.ExceptionManagement.BaseException"/>
            </summary>
            <returns>返回本身</returns>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#ThrowErrorOnFailed">
            <summary>
            如果处理失败，则抛出异常 <see cref="T:HTB.DevFx.ExceptionManagement.BaseException"/>
            </summary>
            <returns>返回本身</returns>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.ResultNo">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.ResultDescription">
            <summary>
            对应的描述信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.ResultAttachObject">
            <summary>
            相应的附加信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.InnerAOPResult">
            <summary>
            内部AOPResult
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.IsSuccess">
            <summary>
            处理结果是否成功（ResultNo == 0）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.IsNotSuccess">
            <summary>
            处理结果是否失败（ResultNo != 0 ）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.IsFailed">
            <summary>
            处理结果是否失败（ResultNo &lt; 0 ）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.IsPassedButFailed">
            <summary>
            已处理，但有不致命的错误（ResultNo &gt; 0）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#ResultNo">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#ResultDescription">
            <summary>
            对应的描述信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#ResultAttachObject">
            <summary>
            相应的附加信息
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#InnerAOPResult">
            <summary>
            内部AOPResult
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#IsSuccess">
            <summary>
            处理结果是否成功（ResultNo == 0）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#IsFailed">
            <summary>
            处理结果是否失败（ResultNo &lt; 0 ）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult.HTB#DevFx#Core#IAOPResult#IsPassedButFailed">
            <summary>
            已处理，但有不致命的错误（ResultNo &gt; 0）
            </summary>
        </member>
        <member name="T:HTB.DevFx.Core.AOPResult`1">
            <summary>
            对象处理返回的结果（泛型）
            </summary>
            <typeparam name="T">附加对象类型</typeparam>
        </member>
        <member name="T:HTB.DevFx.Core.IAOPResult`1">
            <summary>
            对象处理返回的结果接口（泛型）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.IAOPResult`1.ResultAttachObjectEx">
            <summary>
            泛型附加对象
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.#ctor(System.Int32,System.String,`0,HTB.DevFx.Core.IAOPResult)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
            <param name="resultAttachObject">相应的附加信息</param>
            <param name="innerAOPResult">内部AOPResult</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.#ctor(System.Int32,System.String,`0)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
            <param name="resultAttachObject">相应的附加信息</param>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.#ctor(System.Int32,System.String,HTB.DevFx.Core.IAOPResult)">
            <summary>
            构造函数
            </summary>
            <param name="resultNo">返回代码</param>
            <param name="resultDescription">对应的描述信息</param>
            <param name="innerAOPResult">内部AOPResult</param>
        </member>
        <member name="F:HTB.DevFx.Core.AOPResult`1.resultAttachObjectEx">
            <summary>
            附加信息（泛型）
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.AOPResult`1.Success(`0)">
            <summary>
            返回执行成功结果（附加对象）
            </summary>
            <param name="resultAttachObject">附加对象</param>
            <returns>AOPResult（泛型）</returns>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult`1.ResultAttachObjectEx">
            <summary>
            附加信息（泛型）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.AOPResult`1.HTB#DevFx#Core#IAOPResult{T}#ResultAttachObjectEx">
            <summary>
            泛型附加对象
            </summary>
        </member>
        <member name="T:HTB.DevFx.Core.BaseEventArgs">
            <summary>
            事件参数基础类
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.BaseEventArgs.sender">
            <summary>
            事件发生者
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.BaseEventArgs.eventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.BaseEventArgs.#ctor(System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="sender">事件发生者</param>
        </member>
        <member name="M:HTB.DevFx.Core.BaseEventArgs.#ctor(System.Object,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="sender">事件发生者</param>
            <param name="eventType">事件类型</param>
        </member>
        <member name="P:HTB.DevFx.Core.BaseEventArgs.Sender">
            <summary>
            事件发生者
            </summary>
        </member>
        <member name="P:HTB.DevFx.Core.BaseEventArgs.EventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="T:HTB.DevFx.Core.BaseEventArgs`1">
            <summary>
            事件参数基础类（泛型）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Core.BaseEventArgs`1.eventValue">
            <summary>
            事件附加值
            </summary>
        </member>
        <member name="M:HTB.DevFx.Core.BaseEventArgs`1.#ctor(System.Object,System.String,`0)">
            <summary>
            构造方法
            </summary>
            <param name="sender">事件发生者</param>
            <param name="eventType">事件类型</param>
            <param name="eventValue">事件附加值</param>
        </member>
        <member name="P:HTB.DevFx.Core.BaseEventArgs`1.EventValue">
            <summary>
            事件附加值
            </summary>
        </member>
        <member name="T:HTB.DevFx.Core.EventHandlerDelegate`1">
            <summary>
            事件委托（泛型）
            </summary>
            <typeparam name="T">事件参数类型</typeparam>
            <param name="sender">事件发生者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:HTB.DevFx.Core.EventHandlerDelegate`2">
            <summary>
            事件委托（泛型）
            </summary>
            <typeparam name="T">事件参数类型</typeparam>
            <typeparam name="V">事件附加值类型</typeparam>
            <param name="sender">事件发生者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:HTB.DevFx.Cryptography.CryptographyException">
            <summary>
            加密异常
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cryptography.CryptographyException.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:HTB.DevFx.Cryptography.HashCrypto">
            <summary>
            关于Hash的一些实用方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cryptography.HashCrypto.Hash(System.Byte[],System.String)">
            <summary>
            Hash算法
            </summary>
            <param name="input">被Hash的字节数组</param>
            <param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>Hash结果字节数组</returns>
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cryptography.HashCrypto.Hash(System.IO.Stream,System.String)">
            <summary>
            Hash算法
            </summary>
            <param name="input">被Hash的字节流</param>
            <param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>Hash结果字节数组</returns>
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cryptography.HashCrypto.HashFile(System.String,System.String)">
            <summary>
            Hash文件
            </summary>
            <param name="fileName">被Hash的文件（包括路径）</param>
            <param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>Hash结果字符串</returns>
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cryptography.HashCrypto.HashFileReturnRawData(System.String,System.String)">
            <summary>
            Hash文件
            </summary>
            <param name="fileName">被Hash的文件（包括路径）</param>
            <param name="hashFormat">Hash算法："md5"、"sha1"</param>
            <returns>Hash结果</returns>
            <remarks>
            当参数<paramref name="hashFormat">不为"md5"、"sha1"时，返回<c>null</c></paramref>
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Data.Attributes.ColumnAttribute">
            <summary>
            一个简单实现O/R关系的描述属性
            </summary>
            <remarks>
            配合 <see cref="T:HTB.DevFx.Data.Utils.DataTransfer"/> 来实现对象和数据的转换
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Data.Attributes.ColumnAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="columnName">列名</param>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.ColumnName">
            <summary>
            设置/获取列名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.ColumnGroup">
            <summary>
            设置/获取列隶属的组分类
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.ColumnType">
            <summary>
            设置/获取列的类型
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.ColumnSize">
            <summary>
            设置/获取列类型的长度
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.DefaultValue">
            <summary>
            设置/获取列的缺省值
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.ReadOnly">
            <summary>
            设置/获取指示此列是否只读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.WriteOnly">
            <summary>
            设置/获取指示此列是否只写
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.IsPrimaryKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.Attributes.ColumnAttribute.IsNullable">
            <summary>
            是否可<c>null</c>
            </summary>
        </member>
        <member name="T:HTB.DevFx.Data.FieldMemberInfo">
            <summary>
            实现<see cref="T:HTB.DevFx.Data.IFieldMemberInfo"/>接口
            </summary>
        </member>
        <member name="T:HTB.DevFx.Data.IFieldMemberInfo">
            <summary>
            对<see cref="T:HTB.DevFx.Data.Attributes.ColumnAttribute"/>的包装
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.IFieldMemberInfo.GetValue(System.Object)">
            <summary>
            获取字段的值
            </summary>
            <param name="obj">包含此字段的实例</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.IFieldMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置字段的值
            </summary>
            <param name="obj">包含此字段的实例</param>
            <param name="value">字段的值</param>
        </member>
        <member name="P:HTB.DevFx.Data.IFieldMemberInfo.CanRead">
            <summary>
            字段是否可读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.IFieldMemberInfo.CanWrite">
            <summary>
            字段是否可写
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.IFieldMemberInfo.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.IFieldMemberInfo.MemberInfo">
            <summary>
            字段加载的成员信息<see cref="P:HTB.DevFx.Data.IFieldMemberInfo.MemberInfo"/>
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.IFieldMemberInfo.Column">
            <summary>
            字段本身的加载信息<see cref="T:HTB.DevFx.Data.Attributes.ColumnAttribute"/>
            </summary>
        </member>
        <member name="F:HTB.DevFx.Data.FieldMemberInfo.FieldBindingFlags">
            <summary>
            字段绑定预置值
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.#ctor(HTB.DevFx.Data.Attributes.ColumnAttribute,System.Reflection.PropertyInfo)">
            <summary>
            构造方法
            </summary>
            <param name="columnAttribute">特性</param>
            <param name="property">属性信息</param>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.#ctor(HTB.DevFx.Data.Attributes.ColumnAttribute,System.Reflection.FieldInfo)">
            <summary>
            构造方法
            </summary>
            <param name="columnAttribute">特性</param>
            <param name="field">字段信息</param>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.GetValue(System.Object)">
            <summary>
            获取字段的值
            </summary>
            <param name="obj">包含此字段的实例</param>
            <returns>字段的值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置字段的值
            </summary>
            <param name="obj">包含此字段的实例</param>
            <param name="value">字段的值</param>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.GetFieldMembers(System.Type)">
            <summary>
            获取绑定的字段信息列表
            </summary>
            <param name="type">被获取的类型</param>
            <returns>IFieldMemberInfo[]</returns>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.GetFieldMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取绑定的字段信息列表
            </summary>
            <param name="type">被获取的类型</param>
            <param name="columnBindingFlags">绑定标识</param>
            <returns>IFieldMemberInfo[]</returns>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.GetFieldMembers(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取绑定的字段信息列表
            </summary>
            <param name="type">被获取的类型</param>
            <param name="columnBindingFlags">绑定标识</param>
            <param name="inherit">是否包含继承类</param>
            <returns>IFieldMemberInfo[]</returns>
        </member>
        <member name="M:HTB.DevFx.Data.FieldMemberInfo.GetFieldMember(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取绑定的字段信息
            </summary>
            <param name="type">被获取的类型</param>
            <param name="fieldName">字段名</param>
            <param name="columnBindingFlags">绑定标识</param>
            <param name="inherit">是否包含继承类</param>
            <returns>IFieldMemberInfo</returns>
        </member>
        <member name="P:HTB.DevFx.Data.FieldMemberInfo.CanRead">
            <summary>
            字段是否可读
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.FieldMemberInfo.CanWrite">
            <summary>
            字段是否可写
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.FieldMemberInfo.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.FieldMemberInfo.MemberInfo">
            <summary>
            字段加载的成员信息<see cref="P:HTB.DevFx.Data.IFieldMemberInfo.MemberInfo"/>
            </summary>
        </member>
        <member name="P:HTB.DevFx.Data.FieldMemberInfo.Column">
            <summary>
            字段本身的加载信息<see cref="T:HTB.DevFx.Data.Attributes.ColumnAttribute"/>
            </summary>
        </member>
        <member name="T:HTB.DevFx.Data.Utils.DataHelper">
            <summary>
            关于数据访问的一些有用的方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.GetValueSafely(System.Data.DataRow,System.String,System.Object)">
            <summary>
            安全的获取DataRow指定列的值
            </summary>
            <param name="row">DataRow</param>
            <param name="fieldName">列名</param>
            <param name="defaultValue">此列的默认值（如果获取失败，则返回此默认值）</param>
            <returns>列的值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.GetValueSafely(System.Data.DataRow,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            安全的获取DataRow指定列指定版本的值
            </summary>
            <param name="row">DataRow</param>
            <param name="fieldName">列名</param>
            <param name="rowVersion">列版本</param>
            <param name="defaultValue">此列的默认值（如果获取失败，则返回此默认值）</param>
            <returns>列的值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.SetDefaultValueWhenDBNull(System.Data.DataRow,System.Object[])">
            <summary>
            设置DataRow的各列值为缺省值
            </summary>
            <param name="dr">DataRow</param>
            <param name="values">缺省值列表，与DataRow的列具有相同的个数和顺序</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.SetDataRowDefaultValues(System.Data.DataRow,System.Object[])">
            <summary>
            设置DataRow的各列值为缺省值
            </summary>
            <param name="dr">DataRow</param>
            <param name="values">缺省值列表，与DataRow的列具有相同的个数和顺序</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.SetDefaultValueWhenDBNull(System.Data.DataRow)">
            <summary>
            设置DataRow的各列值为缺省值（从DataTable的Schema中读取缺省值）
            </summary>
            <param name="dr">DataRow</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.SetColumnDefaultValue(System.Data.DataTable,System.Object[])">
            <summary>
            设置DataTable列的缺省值
            </summary>
            <param name="dt">DataTable</param>
            <param name="values">缺省值列表，与DataTable的列具有相同顺序（允许个数不同）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.SetColumnAllowDBNull(System.Data.DataTable,System.Boolean[])">
            <summary>
            设置DataTable列是否允许DBNull
            </summary>
            <param name="dt">DataTable</param>
            <param name="values">列列是否允许DBNull，与DataTable的列具有相同顺序（允许个数不同）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataHelper.GetDefaultColumnAttibuteValues(System.Type)">
            <summary>
            获取具有 <see cref="T:HTB.DevFx.Data.Attributes.ColumnAttribute"/> 属性的缺省值
            </summary>
            <param name="type">需要反射的类型</param>
            <returns>缺省值列表</returns>
        </member>
        <member name="T:HTB.DevFx.Data.Utils.DataTransfer">
            <summary>
            关于对象和数据存储转换的一些有用的方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(``0[],System.Data.DataTable,System.Reflection.BindingFlags)">
            <summary>
            对象到DataTable的转换
            </summary>
            <param name="objs">对象列表（类型一致的对象）</param>
            <param name="dt">DataTable</param>
            <param name="columnBindingFlags">BindingFlags</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(``0[],System.Data.DataTable)">
            <summary>
            对象到DataTable的转换
            </summary>
            <param name="objs">对象列表（类型一致的对象）</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(``0,System.Data.DataTable)">
            <summary>
            对象到DataTable的转换
            </summary>
            <param name="obj">对象</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(``0,System.Data.DataRow)">
            <summary>
            对象到DataTable的转换
            </summary>
            <param name="obj">对象</param>
            <param name="dr">DataRow</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataTable,``0[],System.Reflection.BindingFlags)">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
            <param name="columnBindingFlags">BindingFlags</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataRow[],``0[])">
            <summary>
            DataRow到对象的转换
            </summary>
            <param name="drs">DataRow数组，必须是有相同架构（Schema）的DataRow</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataRow[],``0[],System.Reflection.BindingFlags)">
            <summary>
            DataRow到对象的转换
            </summary>
            <param name="drs">DataRow数组，必须是有相同架构（Schema）的DataRow</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
            <param name="columnBindingFlags">BindingFlags</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.IDataRecord[],``0[],System.Reflection.BindingFlags)">
            <summary>
            IDataRecord到对象的转换
            </summary>
            <typeparam name="T">需要被转换的类型</typeparam>
            <param name="drs">IDataRecord数组</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
            <param name="columnBindingFlags">BindingFlags</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.IDataRecord[],``0[])">
            <summary>
            IDataRecord到对象的转换
            </summary>
            <typeparam name="T">需要被转换的类型</typeparam>
            <param name="drs">IDataRecord数组</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.IDataRecord[],System.Reflection.BindingFlags)">
            <summary>
            IDataRecord到对象的转换
            </summary>
            <typeparam name="T">需要被转换的类型</typeparam>
            <param name="drs">IDataRecord数组</param>
            <param name="columnBindingFlags">BindingFlags</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.IDataRecord[])">
            <summary>
            IDataRecord到对象的转换
            </summary>
            <typeparam name="T">需要被转换的类型</typeparam>
            <param name="drs">IDataRecord数组</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.IDataRecord)">
            <summary>
            IDataRecord到对象的转换
            </summary>
            <typeparam name="T">需要被转换的类型</typeparam>
            <param name="dr">IDataRecord</param>
            <returns>转换后的对象</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject(System.Data.DataTable,System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="type">需要转换的对象类型</param>
            <param name="columnBindingFlags">BindingFlags</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataTable,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="columnBindingFlags">BindingFlags</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject(System.Data.DataRow[],System.Type,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            DataRow到对象的转换
            </summary>
            <param name="drs">DataRow数组，必须是有相同架构（Schema）的DataRow</param>
            <param name="type">需要转换的对象类型</param>
            <param name="columnBindingFlags">BindingFlags</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataRow[],System.Reflection.BindingFlags,System.Object[])">
            <summary>
            DataRow到对象的转换
            </summary>
            <param name="drs">DataRow数组，必须是有相同架构（Schema）的DataRow</param>
            <param name="columnBindingFlags">BindingFlags</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject(System.Data.DataTable,System.Type,System.Object[])">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="type">需要转换的对象类型</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject``1(System.Data.DataTable,System.Object[])">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="parameters">对象类型构造函数的参数列表</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject(System.Data.DataTable,System.Object[])">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="objs">需要被填充的对象列表（类型一致的对象，不允许空引用）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransObject(System.Data.DataTable,System.Object)">
            <summary>
            DataTable到对象的转换
            </summary>
            <param name="dt">DataTable</param>
            <param name="obj">需要被填充的对象（不允许空引用）</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransWebFormDataToEntityProperty(System.Object,System.Object)">
            <summary>
            WebForm数据到实体属性的转换
            </summary>
            <param name="form">被转换的WebForm实体（Page的派生类）</param>
            <param name="entity">实体（不允许空引用），支持<see cref="T:System.Data.DataRow"/>、<see cref="T:System.Data.IDataParameterCollection"/></param>
            <example>
            	<code>
            		public class myPage : System.Web.UI.Page
            		{
            			[Column("Title")]
            			protected TextBox txtTitle;
            			[Column("Description")]
            			protected TextBox txtDescription;
            			
            			private void btnSubmit_Click(object sender, EventArgs e) {
            				YourEntity entity = new YourEntity();
            				DataTransfer.TransWebFormDataToEntityProperty(this, entity);
            			}
            		}
            	</code>
            </example>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.DataTransfer.TransEntityPropertyToWebFormData(System.Object,System.Object)">
            <summary>
            实体属性到WebForm数据的转换
            </summary>
            <param name="entity">实体（不允许空引用），支持<see cref="T:System.Data.DataRow"/></param>
            <param name="form">被转换的WebForm实体（Page的派生类）</param>
            <example>
            	<code>
            		public class myPage : System.Web.UI.Page
            		{
            			[Column("Title")]
            			protected TextBox txtTitle;
            			[Column("Description")]
            			protected TextBox txtDescription;
            			
            			private void Page_Load(object sender, EventArgs e) {
            				YourEntity entity;
            				//load entity data ...
            				DataTransfer.TransEntityPropertyToWebFormData(entity, this);
            			}
            		}
            	</code>
            </example>
        </member>
        <member name="T:HTB.DevFx.Data.Utils.SqlHelper">
            <summary>
            数据访问实用类（SQL Server）
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],HTB.DevFx.Data.Utils.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Boolean)">
            <summary>
            填充DataSet，并指定是否需要填充数据的Schema
            </summary>
            <param name="connectionString">数据库链接字符串</param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="dataSet">需被填充的DataSet</param>
            <param name="tableNames">填充的DataTable名称列表</param>
            <param name="fillSchema">是否需要填充数据的Schema</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Boolean)">
            <summary>
            填充DataSet，并指定是否需要填充数据的Schema
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="dataSet">需被填充的DataSet</param>
            <param name="tableNames">填充的DataTable名称列表</param>
            <param name="fillSchema">是否需要填充数据的Schema</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            填充DataSet，并指定是否需要填充数据的Schema
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="commandType">命令类型</param>
            <param name="commandText">命令文本</param>
            <param name="dataSet">需被填充的DataSet</param>
            <param name="tableNames">填充的DataTable名称列表</param>
            <param name="fillSchema">是否需要填充数据的Schema</param>
            <param name="commandParameters">命令参数列表</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
             2005.06.03, fix a bug (when fill more than 3 tables into dataset), by chenfojin(R2)
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
             2005.06.03, fix a bug (when fill more than 3 tables into dataset), by chenfojin(R2)
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="fillSchema">Fill Schema into the DataSet, chenfojin (R2), 2005.06.30</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.AssignParameterValuesWithReturnValue(System.Data.SqlClient.SqlConnection,System.String,System.Object[],System.Data.SqlClient.SqlParameter@)">
            <summary>
            添加值到存储过程参数中，并添加存储过程返回值的参数
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名字</param>
            <param name="parameterValues">参数值</param>
            <param name="returnParameter">返回值参数对象</param>
            <returns>已有值的参数列表</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReturnValue(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行存储过程直接返回存储过程的返回值
            </summary>
            <param name="connection">数据库链接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">参数值</param>
            <returns>存储过程返回值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReturnValue(System.String,System.String,System.Object[])">
            <summary>
            执行存储过程直接返回存储过程的返回值
            </summary>
            <param name="connectionString">数据库链接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">参数值</param>
            <returns>存储过程返回值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.ExecuteReturnValue(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行存储过程直接返回存储过程的返回值
            </summary>
            <param name="transaction">数据库事务对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">参数值</param>
            <returns>存储过程返回值</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelper.GetConnectionString(System.String)">
            <summary>
            获取数据库链接字符串
            </summary>
            <param name="connectionName">数据库链接字符串名</param>
            <returns>数据库链接字符串</returns>
        </member>
        <member name="T:HTB.DevFx.Data.Utils.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:HTB.DevFx.Data.Utils.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:HTB.DevFx.Data.Utils.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:HTB.DevFx.Data.Utils.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:HTB.DevFx.Data.Utils.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:HTB.DevFx.Log.Config.SectionHandler">
            <summary>
            日志的配置信息
            </summary>
            <remarks>
            配置文件格式和说明：
            	<code>
            		&lt;configSections&gt;
            			&lt;sectionGroup name="htb.devfx" type="HTB.DevFx.Config.GroupHandler, HTB.DevFx.BaseFx"&gt;
            				&lt;section name="log" type="HTB.DevFx.Log.Config.SectionHandler, HTB.DevFx.BaseFx" /&gt;
            				......
            			&lt;/sectionGroup&gt;
            		&lt;/configSections&gt;
            
            		......
            
            		&lt;htb.devfx&gt;
            			&lt;log&gt;
            				......
            			&lt;/log&gt;
            		&lt;/htb.devfx&gt;
            		......
            	</code>
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Log.Config.SectionHandler.LogPath">
            <summary>
            日志保存的路径（可为相对应用程序的路径）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Log.Config.SectionHandler.LogFile">
            <summary>
            日志文件名规则，遵循<see cref="T:System.DateTime"/>的格式化表达式
            </summary>
        </member>
        <member name="T:HTB.DevFx.Log.IBaseLogger">
            <summary>
            日志记录器接口
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.IBaseLogger.WriteLog(System.Object,System.Int32,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="sender">日志来源</param>
            <param name="level">日志级别（决定处理方法）</param>
            <param name="message">日志信息</param>
        </member>
        <member name="T:HTB.DevFx.Log.LogEventArgs">
            <summary>
            日志写入事件参数类
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LogEventArgs.#ctor(System.Object,System.Int32,System.DateTime,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="sender">日志发送者</param>
            <param name="level">日志等级，参见<see cref="T:HTB.DevFx.Log.LogLevel"/></param>
            <param name="logTime">日志发生时间</param>
            <param name="message">日志消息</param>
        </member>
        <member name="P:HTB.DevFx.Log.LogEventArgs.Level">
            <summary>
            日志等级，参见<see cref="T:HTB.DevFx.Log.LogLevel"/>
            </summary>
        </member>
        <member name="P:HTB.DevFx.Log.LogEventArgs.LogTime">
            <summary>
            日志发生时间
            </summary>
        </member>
        <member name="P:HTB.DevFx.Log.LogEventArgs.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="T:HTB.DevFx.Log.LoggorHelper">
            <summary>
            日志的帮助类
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LoggorHelper.logger">
            <summary>
            日志实例（单件）
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.TimerOnElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            时间到了后的操作（会引发写入日志操作）
            </summary>
            <param name="sender">Object</param>
            <param name="e">ElapsedEventArgs</param>
        </member>
        <member name="F:HTB.DevFx.Log.LoggorHelper.queue">
            <summary>
            日志队列
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LoggorHelper.timer">
            <summary>
            日志定时器
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LoggorHelper.logPath">
            <summary>
            日志保存路径
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LoggorHelper.logFile">
            <summary>
            日志文件
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.OnLogEvent(HTB.DevFx.Log.LogEventArgs)">
            <summary>
            日志写入触发方法
            </summary>
            <param name="e">LogEventArgs</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.String)">
            <summary>
            写日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.Object,System.String)">
            <summary>
            写日志
            </summary>
            <param name="sender">调用者</param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.String,System.Object[])">
            <summary>
            写日志
            </summary>
            <param name="logFormat">日志格式</param>
            <param name="parameters">格式化参数</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.Object,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
            <param name="sender">调用者</param>
            <param name="logFormat">日志格式</param>
            <param name="parameters">格式化参数</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            写日志
            </summary>
            <param name="sender">调用者</param>
            <param name="level">日志等级，参见<see cref="T:HTB.DevFx.Log.LogLevel"/></param>
            <param name="logFormat">日志格式</param>
            <param name="parameters">格式化参数</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.WriteLog(System.Object,System.Int32,System.String)">
            <summary>
            写日志
            </summary>
            <param name="sender">调用者</param>
            <param name="level">日志等级，参见<see cref="T:HTB.DevFx.Log.LogLevel"/></param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:HTB.DevFx.Log.LoggorHelper.DefaultLogEventHandler(System.Object,HTB.DevFx.Log.LogEventArgs)">
            <summary>
            缺省的日志写入处理
            </summary>
            <param name="sender">调用者</param>
            <param name="e">LogEventArgs</param>
        </member>
        <member name="E:HTB.DevFx.Log.LoggorHelper.logEvent">
            <summary>
            日志事件
            </summary>
        </member>
        <member name="E:HTB.DevFx.Log.LoggorHelper.LogEvent">
            <summary>
            写入日志的事件
            </summary>
        </member>
        <member name="T:HTB.DevFx.Log.LogLevel">
            <summary>
            日志等级（系统预置）
            </summary>
            <remarks>
            日志等级一般是由应用程序自己定义的，本类只是提供一般的等级分类，应用程序也可以不遵循此分类
            </remarks>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.MAX">
            <summary>
            等级最大值
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.EMERGENCY">
            <summary>
            紧急事件的日志等级（120000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.FATAL">
            <summary>
            致命事件的日志等级（110000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.ALERT">
            <summary>
             警报事件的日志等级（100000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.ERROR">
            <summary>
            错误事件的日志等级（70000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.WARN">
            <summary>
            警告事件的日志等级（60000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.NOTICE">
            <summary>
            通知事件的日志等级（50000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.INFO">
            <summary>
            信息事件的日志等级（40000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.DEBUG">
            <summary>
            调试事件的日志等级（30000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.TRACE">
            <summary>
            跟踪事件的日志等级（20000）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.NA">
            <summary>
            不表示任何等级（-1）
            </summary>
        </member>
        <member name="F:HTB.DevFx.Log.LogLevel.MIN">
            <summary>
            最小等级
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LogLevel.Parse(System.String)">
            <summary>
            从名称获取等级
            </summary>
            <param name="levelName">日志等级名称</param>
            <returns>等级代码</returns>
        </member>
        <member name="M:HTB.DevFx.Log.LogLevel.Parse(System.String,System.Int32)">
            <summary>
            从名称获取等级
            </summary>
            <param name="levelName">日志等级名称</param>
            <param name="defaultValue">如果没找到，缺省的等级代码</param>
            <returns>等级代码</returns>
        </member>
        <member name="M:HTB.DevFx.Log.LogLevel.TryParse(System.String,System.Int32@)">
            <summary>
            尝试从名称获取等级
            </summary>
            <param name="levelName">日志等级名称</param>
            <param name="levelValue">传入的等级代码</param>
            <returns>是否成功获取等级代码</returns>
        </member>
        <member name="T:HTB.DevFx.Log.LogException">
            <summary>
            日志异常
            </summary>
            <remarks>
            在日志里面，能发现的异常都会包装成此类的实例
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Log.LogException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:HTB.DevFx.Log.LogException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:HTB.DevFx.Log.LogException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Log.LogException.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:HTB.DevFx.Log.LogException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="errorNo">异常编号</param>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:HTB.DevFx.Utils.Checker">
            <summary>
            关于参数验证的一些实用方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.Checker.CheckEmptyString(System.String,System.String,System.Boolean)">
            <summary>
            检查字符串是否为空（null或者长度为0）
            </summary>
            <param name="argName">字符串名</param>
            <param name="argValue">被检查的字符串</param>
            <param name="throwError">为空时是否抛出异常</param>
            <returns>为空则返回true</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Checker.CheckArgumentNull(System.String,System.Object,System.Boolean)">
            <summary>
            检查参数是否为空引用（null）
            </summary>
            <param name="argName">参数名</param>
            <param name="argValue">被检查的参数</param>
            <param name="throwError">为空引用时是否抛出异常</param>
            <returns>为空则返回true</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Checker.CheckEmptyArray(System.String,System.Array,System.Boolean)">
            <summary>
            检查数组是否为空（长度为0）
            </summary>
            <param name="argName">数组名</param>
            <param name="argValue">被检查的数组实例</param>
            <param name="throwError">为空引用时是否抛出异常</param>
            <returns>为空则返回true</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.Checker.CheckFlagsEnumEquals(System.Enum,System.Enum)">
            <summary>
            判断某值是否在枚举内（位枚举）
            </summary>
            <param name="checkingValue">被检测的枚举值</param>
            <param name="expectedValue">期望的枚举值</param>
            <returns>是否包含</returns>
        </member>
        <member name="T:HTB.DevFx.Utils.Encryption">
            <summary>
            关于数据加解密的一些实用方法
            </summary>
            <remarks>
            更多加解密实用方法请参见 <seealso cref="N:HTB.DevFx.Cryptography"/> 命名空间
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Utils.Encryption.Encrypt(System.String,System.String)">
            <summary>
            Hash算法，提供MD5、SHA1算法
            </summary>
            <param name="encryptingString">被Hash的字符串</param>
            <param name="encryptFormat">Hash算法，有"md5"、"sha1"、"clear"（明文，即不加密）等</param>
            <returns>Hash结果字符串</returns>
            <remarks>
            当参数<paramref name="encryptFormat" />不为"md5"、"sha1"、"clear"时，直接返回参数<paramref name="encryptingString" />
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Utils.ImageHelper">
            <summary>
            关于图片处理的一些实用方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,System.String)">
            <summary>
            制作图片的缩略图
            </summary>
            <param name="originalImage">原图</param>
            <param name="width">缩略图的宽（像素）</param>
            <param name="height">缩略图的高（像素）</param>
            <param name="mode">缩略方式</param>
            <returns>缩略图</returns>
            <remarks>
            	<paramref name="mode"/>：
            		<para>HW：指定的高宽缩放（可能变形）</para>
            		<para>HWO：指定高宽缩放（可能变形）（过小则不变）</para>
            		<para>W：指定宽，高按比例</para>
            		<para>WO：指定宽（过小则不变），高按比例</para>
            		<para>H：指定高，宽按比例</para>
            		<para>HO：指定高（过小则不变），宽按比例</para>
            		<para>CUT：指定高宽裁减（不变形）</para>
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.IO.Stream,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            制作图片的缩略图
            </summary>
            <param name="originalStream">原图</param>
            <param name="thumbnailPath">保存缩略图的路径</param>
            <param name="width">缩略图的宽（像素）</param>
            <param name="height">缩略图的高（像素）</param>
            <param name="mode">缩略方式，参见<seealso cref="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,System.String)"/></param>
        </member>
        <member name="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            制作图片的缩略图
            </summary>
            <param name="originalImage">原图</param>
            <param name="thumbnailPath">保存缩略图的路径</param>
            <param name="width">缩略图的宽（像素）</param>
            <param name="height">缩略图的高（像素）</param>
            <param name="mode">缩略方式，参见<seealso cref="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,System.String)"/></param>
        </member>
        <member name="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            制作图片的缩略图
            </summary>
            <param name="originalImagePath">原图的路径</param>
            <param name="thumbnailPath">保存缩略图的路径</param>
            <param name="width">缩略图的宽（像素）</param>
            <param name="height">缩略图的高（像素）</param>
            <param name="mode">缩略方式，参见<seealso cref="M:HTB.DevFx.Utils.ImageHelper.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,System.String)"/></param>
        </member>
        <member name="T:HTB.DevFx.Utils.LogHelper">
            <summary>
            记录日志的实用类
            </summary>
            <remarks>
            注意与 <see cref="T:HTB.DevFx.Log.LoggorHelper"/> 的区别
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Utils.LogHelper.WriteLog(System.String,System.String,System.Object[])">
            <summary>
            向指定文件添加文本信息
            </summary>
            <param name="logPath">所在路径</param>
            <param name="fileName">文本文件名（支持DateTime格式）</param>
            <param name="msgs">信息列表</param>
        </member>
        <member name="M:HTB.DevFx.Utils.LogHelper.WriteLog(System.String,System.Object[])">
            <summary>
            向指定文件添加文本信息
            </summary>
            <param name="fileName">全路径文本文件名</param>
            <param name="msgs">信息列表</param>
        </member>
        <member name="M:HTB.DevFx.Utils.LogHelper.WriteLog(System.String,System.String)">
            <summary>
            向指定文件添加文本信息
            </summary>
            <param name="fileName">全路径文本文件名</param>
            <param name="message">文本信息</param>
        </member>
        <member name="T:HTB.DevFx.Utils.Mail.Config.SectionHandler">
            <summary>
            <see cref="T:HTB.DevFx.Utils.Mail.MailSender"/> 的配置节
            </summary>
            <remarks>
            配置文件格式和说明：
            	<code>
            		&lt;configSections&gt;
            			&lt;sectionGroup name="htb.devfx" type="HTB.DevFx.Config.GroupHandler, HTB.DevFx.BaseFx"&gt;
            				&lt;section name="mail" type="HTB.DevFx.Utils.Mail.Config.SectionHandler, HTB.DevFx.BaseFx" /&gt;
            				......
            			&lt;/sectionGroup&gt;
            		&lt;/configSections&gt;
            
            		......
            
            		&lt;htb.devfx&gt;
            			&lt;mail&gt;
            				&lt;smtpSetting server="" port="" userName="" password="" /&gt;
            			&lt;/mail&gt;
            		&lt;/htb.devfx&gt;
            		......
            	</code>
            </remarks>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.Config.SectionHandler.MailSetting">
            <summary>
            Smtp配置信息
            </summary>
        </member>
        <member name="T:HTB.DevFx.Utils.Mail.Config.MailSetting">
            <summary>
            邮件服务器配置信息，参看<seealso cref="T:HTB.DevFx.Utils.Mail.Config.SectionHandler"/>
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.Config.MailSetting.Server">
            <summary>
            服务器地址（IP或域名）
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.Config.MailSetting.Port">
            <summary>
            服务的侦听端口
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.Config.MailSetting.UserName">
            <summary>
            认证用户名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.Config.MailSetting.Password">
            <summary>
            认证密码
            </summary>
        </member>
        <member name="T:HTB.DevFx.Utils.Mail.MailSender">
            <summary>
            邮件发送工具，支持认证发送
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.Mail.MailSender.Send(System.Net.Mail.MailMessage)">
            <summary>
            发送邮件
            </summary>
            <param name="message">MailMessage实体</param>
        </member>
        <member name="M:HTB.DevFx.Utils.Mail.MailSender.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="message">MailMessage实体</param>
            <param name="cached">是否缓存邮件（提高程序响应速度）</param>
        </member>
        <member name="M:HTB.DevFx.Utils.Mail.MailSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发送者地址</param>
            <param name="to">接收者地址（可填多个地址，用英文分号“;”分割）</param>
            <param name="subject">邮件主题</param>
            <param name="messageText">邮件内容</param>
        </member>
        <member name="M:HTB.DevFx.Utils.Mail.MailSender.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发送者地址</param>
            <param name="to">接收者地址（可填多个地址，用英文分号“;”分割）</param>
            <param name="subject">邮件主题</param>
            <param name="messageText">邮件内容</param>
            <param name="cached">是否缓存邮件（提高程序响应速度）</param>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.MailSender.SmtpServer">
            <summary>
            SMTP服务器地址
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.MailSender.ServerPort">
            <summary>
            服务器侦听端口
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.MailSender.UserName">
            <summary>
            认证用户名
            </summary>
        </member>
        <member name="P:HTB.DevFx.Utils.Mail.MailSender.Password">
            <summary>
            认证用户密码
            </summary>
        </member>
        <member name="T:HTB.DevFx.Utils.RandomHelper">
            <summary>
            随机数实用类
            </summary>
        </member>
        <member name="F:HTB.DevFx.Utils.RandomHelper.DEFAULT_CHARLIST">
            <summary>
            缺省的字符串取值范围
            </summary>
        </member>
        <member name="F:HTB.DevFx.Utils.RandomHelper.READ_CHARLIST">
            <summary>
            可读的字符串取值范围
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.RandomHelper.GetRandomBytes(System.Int32)">
            <summary>
            获取随机字节序列
            </summary>
            <param name="length">字节序列的长度</param>
            <returns>字节序列</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.RandomHelper.GetRandomString(System.Int32,System.String)">
            <summary>
            获取随机字符串
            </summary>
            <param name="length">字符串长度</param>
            <param name="charList">字符串取值范围（如果为Null或为空，则返回空字符串）</param>
            <returns>随机字符串</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.RandomHelper.GetRandomString(System.Int32)">
            <summary>
            获取随机字符串
            </summary>
            <param name="length">字符串长度</param>
            <returns>随机字符串</returns>
            <remarks>
            缺省使用ASCII从33到126共94个字符作为取值范围
            </remarks>
        </member>
        <member name="T:HTB.DevFx.Utils.TypeHelper">
            <summary>
            关于类型、实例的一些实用方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.CreateType(System.String,System.Boolean)">
            <summary>
            从类型名称中创建类型
            </summary>
            <param name="typeName">类型名</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <returns>Type</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.CreateObject(System.Type,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>
            从类型中创建此类型的实例
            </summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.CreateObject(System.Type,System.Type,System.Boolean,System.Object[])">
            <summary>
            从类型中创建此类型的实例（本方法不支持参数可为Null的构造函数）
            </summary>
            <param name="type">类型</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.CreateObject(System.String,System.Type,System.Boolean,System.Object[])">
            <summary>
            从类型名中创建此类型的实例
            </summary>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameters">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.CreateObject(System.String,System.Type,System.Boolean,System.Type[],System.Object[])">
            <summary>
            从类型名中创建此类型的实例
            </summary>
            <param name="typeName">类型名</param>
            <param name="expectedType">期望的类型</param>
            <param name="throwOnError">失败时是否抛出异常</param>
            <param name="parameterTypes">创建实例所需参数的类型列表</param>
            <param name="parameterValues">创建实例所需的参数值列表</param>
            <returns>类型实例</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            使用反射调用方法
            </summary>
            <param name="obj">类型实例</param>
            <param name="methodName">方法名</param>
            <param name="parameters">参数列表</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.FindType(System.String)">
            <summary>
            在当前应用程序域中查找指定的类型
            </summary>
            <param name="typeName">类型全名（包括命名空间）</param>
            <returns>找到则返回指定的类型，否则返回空</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.TypeHelper.GetAttributeFromAssembly``1(System.Reflection.Assembly[])">
            <summary>
            从程序集中获得元属性
            </summary>
            <param name="assemblies">程序集，如果为null，则从当前应用程序域中获取所载入的所有程序集</param>
            <returns>找到的元属性的数组</returns>
        </member>
        <member name="T:HTB.DevFx.Utils.WebHelper">
            <summary>
            关于WEB项目的一些实用方法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.IsUrlEquals(System.String,System.Web.HttpRequest)">
            <summary>
            判断Url是否相同（QueryString参数允许不同）
            </summary>
            <param name="expectedUrl">被比较的Url</param>
            <param name="httpRequest">HttpRequest实例</param>
            <returns>相同返回true</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.MakeUrlRelative(System.String,System.String)">
            <summary>
            把指定的Url转换成相对地址（以"~/"打头）
            </summary>
            <param name="url">被转换的Url</param>
            <param name="basePath">基地址（比如虚拟目录的地址：/WebApplication1）</param>
            <returns>转换后的相对地址</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.UrlCombine(System.String,System.String,System.Boolean)">
            <summary>
            把指定的路径信息和相对地址（以"~/"打头）合并成绝对路径（以"/"打头）
            </summary>
            <param name="basePath">基地址（比如虚拟目录的地址：/WebApplication1）</param>
            <param name="url">被转换的Url</param>
            <param name="includeQueryString">是否包含Url参数</param>
            <returns>转换后的绝对地址，如果url不是以"~/"打头，则返回原url</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.NameValueCollectionToQueryString(System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
            <summary>
            名/值集合转换成QueryString形式
            </summary>
            <param name="collection">名/值集合</param>
            <param name="encoding">编码</param>
            <returns>QueryString</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.NameValueCollectionToQueryString(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            名/值集合转换成QueryString形式
            </summary>
            <param name="collection">名/值集合</param>
            <param name="encodingName">编码名称</param>
            <returns>QueryString</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.SetDropDownListValueSafely(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            安全设置<see cref="T:System.Web.UI.WebControls.DropDownList"/>的值
            </summary>
            <param name="control">需要设置的<see cref="T:System.Web.UI.WebControls.DropDownList"/></param>
            <param name="value">设置的值</param>
            <returns>找到的<see cref="T:System.Web.UI.WebControls.ListItem"/>，如果没找到，则返回空引用</returns>
            <remarks>
            如果<paramref name="control"/>的<see cref="T:System.Web.UI.WebControls.DropDownList"/>实例没有指定的<paramref name="value"/>，那么不进行任何操作
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.ShowMessage(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            在客户端显示消息
            </summary>
            <param name="message">需要显示的信息</param>
            <param name="clientScript">需要在客户端执行的JavaScript代码（可以写入转向脚本等）</param>
            <param name="endResponse">是否结束此次请求</param>
            <param name="doAlert">是否需要在客户端弹出一个Alert对话框</param>
            <example>
            	<code>
            		private void Page_Load(object sender, EventArgs e){
            			// your code here
            			......
            			if(failed) {
            				WebHelper.ShowMessage("submit false, please try again!", "history.back()", true, true);
            			}
            			......
            		}
            	</code>
            </example>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.ToBase64(System.String,System.String)">
            <summary>
            把字符串进行BASE64编码
            </summary>
            <param name="inputString">原字符串</param>
            <param name="encodingName">编码格式名</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.FromBase64(System.String,System.String)">
            <summary>
            对BASE64字符串进行解码
            </summary>
            <param name="base64String">待解码的字符串</param>
            <param name="encodingName">编码格式名</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.ToHexString(System.Byte[])">
            <summary>
            把字节数组转换成16进制表示的字符串
            </summary>
            <param name="sArray">字节数组</param>
            <returns>16进制表示的字符串</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.FromHexString(System.String)">
            <summary>
            把16进制表示的字符串转换成字节数组
            </summary>
            <param name="hexString">进制表示的字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.GetPhysicalPath(System.String,System.String,System.Boolean)">
            <summary>
            获取绝对路径
            </summary>
            <param name="basePath">基本路径</param>
            <param name="path">相对路径</param>
            <param name="createdIfNotExists">如果目录不存在，是否自动创建</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:HTB.DevFx.Utils.WebHelper.GetFullPath(System.String)">
            <summary>
            获取相对应用系统部署目录的绝对路径
            </summary>
            <param name="path">相对路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:HTB.DevFx.Cryptography.XXTEA">
            <summary>
            XXTEA加解密算法
            </summary>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="data">原文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
            <remarks>
            密文不包含原始数据长度
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Encrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            加密
            </summary>
            <param name="data">原文</param>
            <param name="key">密钥</param>
            <param name="includeDataLength">密文是否包含原始数据长度</param>
            <returns>密文</returns>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="data">原文（将经过UTF8编码变换）</param>
            <param name="key">密钥（将经过UTF8编码变换及MD5的Hash）</param>
            <returns>密文（HEX格式）</returns>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="data">密文</param>
            <param name="key">密钥</param>
            <returns>原文</returns>
            <remarks>
            密文不包含原始数据长度
            </remarks>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Decrypt(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            解密
            </summary>
            <param name="data">密文</param>
            <param name="key">密钥</param>
            <param name="includeDataLength">密文是否包含原始数据长度</param>
            <returns>原文</returns>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="data">密文（HEX格式）</param>
            <param name="key">密钥（将经过UTF8编码变换及MD5的Hash）</param>
            <returns>原文</returns>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Encrypt(System.UInt32[],System.UInt32[])">
            <summary>
            加密
            </summary>
            <param name="v">原文</param>
            <param name="k">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:HTB.DevFx.Cryptography.XXTEA.Decrypt(System.UInt32[],System.UInt32[])">
            <summary>
            解密
            </summary>
            <param name="v">密文</param>
            <param name="k">密钥</param>
            <returns>原文</returns>
        </member>
        <member name="T:HTB.DevFx.Web.BaseHttpModule">
            <summary>
            空的 <see cref="T:System.Web.IHttpModule"/>，仅为后续类提供基类
            </summary>
        </member>
        <member name="M:HTB.DevFx.Web.BaseHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化模块
            </summary>
            <param name="context"><see cref="T:System.Web.HttpApplication"/> 实例</param>
        </member>
        <member name="M:HTB.DevFx.Web.BaseHttpModule.Dispose">
            <summary>
            释放模块
            </summary>
        </member>
    </members>
</doc>
